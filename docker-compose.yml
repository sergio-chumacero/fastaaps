###########################################################################
# Título:      SYNC & REST-API Docker Compose
# Ubicación:   FASTAAPS/docker-compose.yml
# Descripción: 
#   Archivo de orquestación de contenedores del servicio de sincronización
#   y del servicio de acceso REST-API. 
###########################################################################

# Versión de Docker-Compose
version: '3.4'

# Lista de Servicios
services:
  # Proceso Trabajador de Celery
  celery:
    container_name: celery
    hostname: celery
    image: &img celery
    build:
      context: ./AAPS-DATA/SYNC
      dockerfile: Dockerfile 
    env_file: &env      
      - config.env
    command: celery worker --app=app.main --pool=solo --concurrency=8 --loglevel=INFO 
    restart: unless-stopped
    depends_on:
    #   - rabbitmq
      - redis
      - pgbouncer
      - fastapi
    networks:
      - apinetwork
      #   - rabbitnetwork
      - redisnetwork
      - pgnetwork
      - mongonetwork
    volumes: &vol
      - ./AAPS-DATA/SYNC/app:/app

  # Base de Datos (PostgreSQL)
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres
    env_file: *env
    restart: unless-stopped
    networks:
      - pgnetwork
    ports:
      - 5432:5432

  # Panel de Control de PostgreSQL (PgAdmin4)
  pgadmin:
    container_name: pgadmin
    hostname: pgadmin
    image: dpage/pgadmin4
    env_file: *env
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - pgnetwork
    ports:
      - 5050:80
    volumes:
      - ./AAPS-DATA/SYNC/pgadmin:/root/.pgadmin
    restart: unless-stopped

  # Gestor de conexiones de PostgreSQL (pgbouncer)
  pgbouncer:
    container_name: pgbouncer
    hostname: pgbouncer
    image: edoburu/pgbouncer
    env_file: *env
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - pgnetwork
    ports:
      - 6432:6432

  # Agente de mensajería RabbitMQ (message broker) + Panel de control
#   rabbitmq:
#     container_name: rabbitmq
#     hostname: rabbitmq
#     image: rabbitmq:3.8.1-management
#     restart: 'no'
#     networks:
#       - rabbitnetwork
#     ports:
#       - 5672:5672
#       - 15672:15672

  redis:
    container_name: redis
    hostname: redis
    image: redis:5.0.7
    env_file: *env
    command: redis-server --requirepass guest
    restart: unless-stopped
    networks:
      - redisnetwork
    ports:
      - 6379:6379
    

  # Servicio de tareas periódicas (scheduler)
  beat:
    container_name: beat
    hostname: beat
    image: *img
    build:
      context: ./AAPS-DATA/SYNC
      dockerfile: Dockerfile
    env_file: *env
    command: celery beat --app=app.main --loglevel INFO --pidfile=
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - redisnetwork
    restart: 'no'
    volumes: *vol
    #   - ./AAPS-DATA/SYNC/app:/app

  # Aplicación de monitoreo
  flower:
    container_name: flower
    hostname: flower
    image: *img
    build:
      context: ./AAPS-DATA/SYNC
      dockerfile: Dockerfile
    env_file: *env
    command: celery flower --app app.main
    restart: unless-stopped
    depends_on:
      - redis
      - celery
      - beat
    networks:
      - redisnetwork
    ports:
      - 5555:5555
    volumes: *vol
    #   - ./AAPS-DATA/SYNC/app:/app

  # MongoDb: Base de Datos Orientada a Documentos
  mongo:
    container_name: mongo
    hostname: mongo
    image: mongo:4.0.13
    env_file: *env
    restart: unless-stopped
    networks:
      - mongonetwork
    ports:
      - 27017:27017
    # volumes:
    #   - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  # Mongo-Express: Herramienta de Monitoreo de MongoDB
  mongo-express:
    container_name: mongo-express
    hostname: mongo-express
    image: mongo-express
    env_file: *env
    restart: unless-stopped
    depends_on:
      - mongo
    networks:
      - mongonetwork
    ports:
      - 8081:8081

  # FastAPI: Serivicio de Acceso REST-API
  fastapi:
    container_name: fastapi
    hostname: fastapi
    image: fastapi
    build:
      context: ./AAPS-API/RESTAPI
      dockerfile: Dockerfile
    env_file: *env
    restart: unless-stopped
    depends_on:
      - mongo
      - pgbouncer
    networks:
      - mongonetwork
      - apinetwork
    ports:
      - 80:80
    volumes:
      - ./AAPS-API/RESTAPI/app:/app
  
networks:
  pgnetwork:
    driver: bridge
#   rabbitnetwork:
#     driver: bridge
  redisnetwork:
    driver: bridge
  mongonetwork:
    driver: bridge
  apinetwork:
    driver: bridge