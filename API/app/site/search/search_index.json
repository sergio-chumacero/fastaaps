{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Inicio \u00b6 Bienvenido a la documentaci\u00f3n del sistema FastAAPS ! General \u00b6 El sistema FastAAPS ... Almacena y Maneja los conjuntos de datos de la instituci\u00f3n a trav\u00e9s de su componente AAPS-DATA . Proporciona un servicio web de datos basado en especificaciones abiertas que permite a aplicaciones y sistemas externos acceder a los conjuntos de datos de la AAPS almacenados en el sistema. Esta funci\u00f3n la realiza su componente AAPS-API . Controla el acceso a los conjuntos de datos a trav\u00e9s de un servicio de autenticaci\u00f3n y autorizaci\u00f3n ofrecido por su componente AAPS-AUTH . Ofrece a sus usuarios aplicaciones interacivas de visualizaci\u00f3n y manejo de datos a trav\u00e9s de la plataforma AAPS-LAB .","title":"Inicio"},{"location":"#inicio","text":"Bienvenido a la documentaci\u00f3n del sistema FastAAPS !","title":"Inicio"},{"location":"#general","text":"El sistema FastAAPS ... Almacena y Maneja los conjuntos de datos de la instituci\u00f3n a trav\u00e9s de su componente AAPS-DATA . Proporciona un servicio web de datos basado en especificaciones abiertas que permite a aplicaciones y sistemas externos acceder a los conjuntos de datos de la AAPS almacenados en el sistema. Esta funci\u00f3n la realiza su componente AAPS-API . Controla el acceso a los conjuntos de datos a trav\u00e9s de un servicio de autenticaci\u00f3n y autorizaci\u00f3n ofrecido por su componente AAPS-AUTH . Ofrece a sus usuarios aplicaciones interacivas de visualizaci\u00f3n y manejo de datos a trav\u00e9s de la plataforma AAPS-LAB .","title":"General"},{"location":"AAPS-API/general/","text":"Servicios de Datos: Conceptos y Tecnolog\u00edas \u00b6 Objetivos \u00b6 Un servicio de datos tiene como fin integrar los recursos de un sistema con aplicaciones y sistemas externos. En el contexto de la AAPS, el fin de implementar un serivicio de datos es doble: La creaci\u00f3n de aplicaciones que apoyen las tareas de sus funcionarios. La interoperabilidad de de los sistemas de la instituci\u00f3n con sistemas y aplicaciones externas. Alerta T\u00e9cnica A partir de este punto discutimos aspectos t\u00e9cnicos relacionados con las decisiones de arquitectura y tecnolog\u00edas utilizadas para la implementaci\u00f3n del sistema FastAAPS. Estos temas son de importancia fundamentalmente para desarrolladores y personal de asistencia t\u00e9cnica. Situaci\u00f3n Actual Global \u00b6 Durante los \u00faltimos a\u00f1os a nivel mundial, la necesidad de integrar sistemas y crear aplicaciones en base a los recursos de distintos sistemas, motiv\u00f3 el desarrollo de servicios REST-API en grandes cantidades. (Fuente: programmable web directory ) Dificultades y Problemas de Uso \u00b6 Junto con el crecimiento en n\u00famero y diversidad de servicios de acceso program\u00e1ticos viene la necesidad de espec\u00edficar estos servicios con el f\u00edn que los clientes del API sepan c\u00f3mo interactuar con el servicio y qu\u00e9 esperar c\u00f3mo respuesta. Por muchos a\u00f1os, a falta de un concenso claro en la industria, los servicios API recurrieron a espec\u00edficar sus servicios API en distintos formatos o simplement en p\u00e1ginas de documentaci\u00f3n orientadas hacia los desarrolladores. Si bien este m\u00e9todo logra el cometido de poder hacer uso del API, conlleva serios problemas y dificultades: El cliente no cuenta con ninguna garant\u00eda de que la documentaci\u00f3n coincida con el servicio. La documentaci\u00f3n puede no estar actualizada, estar incompleta o simplemente estar fallida. El formato de diversos servicios no es estandarizado, lo cual dificulta la creaci\u00f3n de herramientas automatizadas generales y obliga al cliente aprender el m\u00e9todo espec\u00edfico utilizado para cada servicio. Est\u00e1ndares Actuales \u00b6 Existen varios est\u00e1ndares de comunicaci\u00f3n web que buscan solucionar el problema fundamental de integraci\u00f3n de sistemas y la popularidad de estos est\u00e1ndares var\u00eda en funci\u00f3n a los avances y adopci\u00f3n de las tecnolog\u00edas en la industria. Los est\u00e1ndares actuales m\u00e1s relevantes en base a su adopci\u00f3n en la industria son: REST , GraphQL y gRPC . Nota: Est\u00e1ndares de Legado Otros est\u00e1ndares que fueron en su momento altamente relevantes son CORBA y SOAP . Hoy en d\u00eda son pocos los nuevos sistemas implementando estos est\u00e1ndares. A continuaci\u00f3n describimos los est\u00e1ndares actuales a grandes rasgos. REST \u00b6 REST (cuyas siglas en ingl\u00e9s significan Representational State Transfer o en espa\u00f1ol Transferencia de Estado Representado ) es una arquitectura de software para la creaci\u00f3n de servicios web que define restricciones de dise\u00f1o con el fin de adecuar un servicio web a las necesidades y usos modernos. A pesar de no limitar el protocolo de transferencia o el formato de la informaci\u00f3n transmitida, en la gran mayor\u00eda de sus implementaciones, el protocolo utilizado es HTTP y el formato de datos es JSON (o en menor medida XML). Actualmente es el est\u00e1ndar de servicios web m\u00e1s utilizado en la industria. GraphQL \u00b6 GraphQL (cuyas siglas en ingl\u00e9s significan Graph Query Language o en espa\u00f1ol Lenguaje de Consulta de Grafos ) es una especificaci\u00f3n desarrollada originalmente de manera interna por Facebook que luego fu\u00e9 publicada como una especificaci\u00f3n abierta. GraphQL ofrece una especificaci\u00f3n completa del servicio de datos, incluyendo m\u00e9todos que puede usar el cliente para realizar consultas de datos complejas. Tambi\u00e9n especifica metodos de implementaci\u00f3n del servicio. A diferencia de un REST-API, que ofrece puntos de acceso claramente definidos y limitados, GraphQL permite realizar consultas complejas que pueden incluir agregaci\u00f3n de distintos recursos. Esta flexibilidad puede facilitar el uso del servicio y ofrecer ventajas de desempe\u00f1o, al costo de dificultar la implementaci\u00f3n y mantenimiento del servicio. GraphQL es utilizado por varias grandes compa\u00f1\u00edas y su popularidad est\u00e1 aumentando con el paso del tiempo. gRPC \u00b6 gRPC (cuyas siglas en ingl\u00e9s significan gRPC Remote Procedure Calls o en espa\u00f1ol Llamadas a Procedimientos Remotos gRPC ) es una especificaci\u00f3n desarrollada originalmente de manera interna por Google que luego fu\u00e9 publicada como una especificaci\u00f3n abierta. gRPC ofrece una especificaci\u00f3n para la integraci\u00f3n de servicios web basada en el protocolo de transporte HTTP/2 y un m\u00e9todo de serializaci\u00f3n de datos estrucurados, Protocol Buffers , c\u00f3mo formato de transporte. A diferencia de un REST-API, gRPC ofrece caracter\u00edsticas adicionales que normalmente deber\u00edan ser implementadas por el proveedor tales como m\u00e9todos de autenticaci\u00f3n, streams bidireccionales y tiempos de cancelaci\u00f3n de pedidos entre otras. gRPC es normalmente utilizado para la integraci\u00f3n de servicios y dispositivos bajo una arquitectura de microservicios .","title":"Servicios de Datos - Conceptos y Tecnolog\u00edas"},{"location":"AAPS-API/general/#servicios_de_datos_conceptos_y_tecnologias","text":"","title":"Servicios de Datos: Conceptos y Tecnolog\u00edas"},{"location":"AAPS-API/general/#objetivos","text":"Un servicio de datos tiene como fin integrar los recursos de un sistema con aplicaciones y sistemas externos. En el contexto de la AAPS, el fin de implementar un serivicio de datos es doble: La creaci\u00f3n de aplicaciones que apoyen las tareas de sus funcionarios. La interoperabilidad de de los sistemas de la instituci\u00f3n con sistemas y aplicaciones externas. Alerta T\u00e9cnica A partir de este punto discutimos aspectos t\u00e9cnicos relacionados con las decisiones de arquitectura y tecnolog\u00edas utilizadas para la implementaci\u00f3n del sistema FastAAPS. Estos temas son de importancia fundamentalmente para desarrolladores y personal de asistencia t\u00e9cnica.","title":"Objetivos"},{"location":"AAPS-API/general/#situacion_actual_global","text":"Durante los \u00faltimos a\u00f1os a nivel mundial, la necesidad de integrar sistemas y crear aplicaciones en base a los recursos de distintos sistemas, motiv\u00f3 el desarrollo de servicios REST-API en grandes cantidades. (Fuente: programmable web directory )","title":"Situaci\u00f3n Actual Global"},{"location":"AAPS-API/general/#dificultades_y_problemas_de_uso","text":"Junto con el crecimiento en n\u00famero y diversidad de servicios de acceso program\u00e1ticos viene la necesidad de espec\u00edficar estos servicios con el f\u00edn que los clientes del API sepan c\u00f3mo interactuar con el servicio y qu\u00e9 esperar c\u00f3mo respuesta. Por muchos a\u00f1os, a falta de un concenso claro en la industria, los servicios API recurrieron a espec\u00edficar sus servicios API en distintos formatos o simplement en p\u00e1ginas de documentaci\u00f3n orientadas hacia los desarrolladores. Si bien este m\u00e9todo logra el cometido de poder hacer uso del API, conlleva serios problemas y dificultades: El cliente no cuenta con ninguna garant\u00eda de que la documentaci\u00f3n coincida con el servicio. La documentaci\u00f3n puede no estar actualizada, estar incompleta o simplemente estar fallida. El formato de diversos servicios no es estandarizado, lo cual dificulta la creaci\u00f3n de herramientas automatizadas generales y obliga al cliente aprender el m\u00e9todo espec\u00edfico utilizado para cada servicio.","title":"Dificultades y Problemas de Uso"},{"location":"AAPS-API/general/#estandares_actuales","text":"Existen varios est\u00e1ndares de comunicaci\u00f3n web que buscan solucionar el problema fundamental de integraci\u00f3n de sistemas y la popularidad de estos est\u00e1ndares var\u00eda en funci\u00f3n a los avances y adopci\u00f3n de las tecnolog\u00edas en la industria. Los est\u00e1ndares actuales m\u00e1s relevantes en base a su adopci\u00f3n en la industria son: REST , GraphQL y gRPC . Nota: Est\u00e1ndares de Legado Otros est\u00e1ndares que fueron en su momento altamente relevantes son CORBA y SOAP . Hoy en d\u00eda son pocos los nuevos sistemas implementando estos est\u00e1ndares. A continuaci\u00f3n describimos los est\u00e1ndares actuales a grandes rasgos.","title":"Est\u00e1ndares Actuales"},{"location":"AAPS-API/general/#rest","text":"REST (cuyas siglas en ingl\u00e9s significan Representational State Transfer o en espa\u00f1ol Transferencia de Estado Representado ) es una arquitectura de software para la creaci\u00f3n de servicios web que define restricciones de dise\u00f1o con el fin de adecuar un servicio web a las necesidades y usos modernos. A pesar de no limitar el protocolo de transferencia o el formato de la informaci\u00f3n transmitida, en la gran mayor\u00eda de sus implementaciones, el protocolo utilizado es HTTP y el formato de datos es JSON (o en menor medida XML). Actualmente es el est\u00e1ndar de servicios web m\u00e1s utilizado en la industria.","title":"REST"},{"location":"AAPS-API/general/#graphql","text":"GraphQL (cuyas siglas en ingl\u00e9s significan Graph Query Language o en espa\u00f1ol Lenguaje de Consulta de Grafos ) es una especificaci\u00f3n desarrollada originalmente de manera interna por Facebook que luego fu\u00e9 publicada como una especificaci\u00f3n abierta. GraphQL ofrece una especificaci\u00f3n completa del servicio de datos, incluyendo m\u00e9todos que puede usar el cliente para realizar consultas de datos complejas. Tambi\u00e9n especifica metodos de implementaci\u00f3n del servicio. A diferencia de un REST-API, que ofrece puntos de acceso claramente definidos y limitados, GraphQL permite realizar consultas complejas que pueden incluir agregaci\u00f3n de distintos recursos. Esta flexibilidad puede facilitar el uso del servicio y ofrecer ventajas de desempe\u00f1o, al costo de dificultar la implementaci\u00f3n y mantenimiento del servicio. GraphQL es utilizado por varias grandes compa\u00f1\u00edas y su popularidad est\u00e1 aumentando con el paso del tiempo.","title":"GraphQL"},{"location":"AAPS-API/general/#grpc","text":"gRPC (cuyas siglas en ingl\u00e9s significan gRPC Remote Procedure Calls o en espa\u00f1ol Llamadas a Procedimientos Remotos gRPC ) es una especificaci\u00f3n desarrollada originalmente de manera interna por Google que luego fu\u00e9 publicada como una especificaci\u00f3n abierta. gRPC ofrece una especificaci\u00f3n para la integraci\u00f3n de servicios web basada en el protocolo de transporte HTTP/2 y un m\u00e9todo de serializaci\u00f3n de datos estrucurados, Protocol Buffers , c\u00f3mo formato de transporte. A diferencia de un REST-API, gRPC ofrece caracter\u00edsticas adicionales que normalmente deber\u00edan ser implementadas por el proveedor tales como m\u00e9todos de autenticaci\u00f3n, streams bidireccionales y tiempos de cancelaci\u00f3n de pedidos entre otras. gRPC es normalmente utilizado para la integraci\u00f3n de servicios y dispositivos bajo una arquitectura de microservicios .","title":"gRPC"},{"location":"AAPS-API/specifications/","text":"AAPS-API: Especificaci\u00f3n del Servicio de Datos \u00b6 OpenAPI (Swagger) \u00b6 OpenAPI es una especificaci\u00f3n que define un formato de descripci\u00f3n de servicios de datos del tipo REST-API. El formato OpenAPI es el formato de descripci\u00f3n de servicios de datos REST-API m\u00e1s utilizado en la industria.","title":"Especificaci\u00f3n del Servicio de Datos"},{"location":"AAPS-API/specifications/#aaps-api_especificacion_del_servicio_de_datos","text":"","title":"AAPS-API: Especificaci\u00f3n del Servicio de Datos"},{"location":"AAPS-API/specifications/#openapi_swagger","text":"OpenAPI es una especificaci\u00f3n que define un formato de descripci\u00f3n de servicios de datos del tipo REST-API. El formato OpenAPI es el formato de descripci\u00f3n de servicios de datos REST-API m\u00e1s utilizado en la industria.","title":"OpenAPI (Swagger)"},{"location":"AAPS-API/summary/","text":"AAPS-API: Res\u00famen Ejecutivo \u00b6 Bienvenido a la documentaci\u00f3n del componente de acceso de datos AAPS-API ! General \u00b6 El sistema AAPS-API ... Proporciona un servicio web de datos basado en especificaciones abiertas modernas que permite a aplicaciones y sistemas externos acceder a los conjuntos de datos de la AAPS almacenados en el componente AAPS-DATA . Utiliza el servicio de autenticaci\u00f3n y autorizaci\u00f3n ofrecido por el componente AAPS-AUTH para controlar el acceso hacia los recursos de la instituci\u00f3n. Brinda sus servicios a las aplicaciones del componente AAPS-LAB . Ofrece a una aplicaci\u00f3n web que permite explorar los puntos de acceso de manera interactiva. Esta aplicaci\u00f3n sirve de especificaci\u00f3n t\u00e9cnica completa del servicio de datos y al mismo tiempo sirve de documentaci\u00f3n para sus usuarios. Objetivos \u00b6 Un servicio de datos tiene como fin integrar los recursos de un sistema con aplicaciones y sistemas externos. En el contexto de la AAPS, el fin de implementar un serivicio de datos es doble: La creaci\u00f3n de aplicaciones que apoyen las tareas de sus funcionarios. La interoperabilidad de de los sistemas de la instituci\u00f3n con sistemas y aplicaciones externas.","title":"Res\u00famen"},{"location":"AAPS-API/summary/#aaps-api_resumen_ejecutivo","text":"Bienvenido a la documentaci\u00f3n del componente de acceso de datos AAPS-API !","title":"AAPS-API: Res\u00famen Ejecutivo"},{"location":"AAPS-API/summary/#general","text":"El sistema AAPS-API ... Proporciona un servicio web de datos basado en especificaciones abiertas modernas que permite a aplicaciones y sistemas externos acceder a los conjuntos de datos de la AAPS almacenados en el componente AAPS-DATA . Utiliza el servicio de autenticaci\u00f3n y autorizaci\u00f3n ofrecido por el componente AAPS-AUTH para controlar el acceso hacia los recursos de la instituci\u00f3n. Brinda sus servicios a las aplicaciones del componente AAPS-LAB . Ofrece a una aplicaci\u00f3n web que permite explorar los puntos de acceso de manera interactiva. Esta aplicaci\u00f3n sirve de especificaci\u00f3n t\u00e9cnica completa del servicio de datos y al mismo tiempo sirve de documentaci\u00f3n para sus usuarios.","title":"General"},{"location":"AAPS-API/summary/#objetivos","text":"Un servicio de datos tiene como fin integrar los recursos de un sistema con aplicaciones y sistemas externos. En el contexto de la AAPS, el fin de implementar un serivicio de datos es doble: La creaci\u00f3n de aplicaciones que apoyen las tareas de sus funcionarios. La interoperabilidad de de los sistemas de la instituci\u00f3n con sistemas y aplicaciones externas.","title":"Objetivos"},{"location":"AAPS-AUTH/specifications/","text":"AAPS-AUTH: Especificaciones y Protocolos de Seguridad \u00b6 Un servicio de datos debe ir acompa\u00f1ado de un sistema de seguridad y control de acceso. La especificaci\u00f3n OpenAPI usada para la descripci\u00f3n t\u00e9cnica del servicio de datos AAPS-API permite definir el m\u00e9todo utilizado para verificar la identidad de un usuario y los permisos de un usuario en el sistema. Estos procesos son denominados Autenticaci\u00f3n y Autorizaci\u00f3n respectivamente. Autenticaci\u00f3n \u00b6 Autorizaci\u00f3n \u00b6 OAuth 2.0 \u00b6 OAuth 2.0 es una especificaci\u00f3n que define varios m\u00e9todos de autenticaci\u00f3n y autorizaci\u00f3n. Es una especificaci\u00f3n bastante extensiva y abarca muchos casos de uso complejos.","title":"Especificaciones de Seguridad"},{"location":"AAPS-AUTH/specifications/#aaps-auth_especificaciones_y_protocolos_de_seguridad","text":"Un servicio de datos debe ir acompa\u00f1ado de un sistema de seguridad y control de acceso. La especificaci\u00f3n OpenAPI usada para la descripci\u00f3n t\u00e9cnica del servicio de datos AAPS-API permite definir el m\u00e9todo utilizado para verificar la identidad de un usuario y los permisos de un usuario en el sistema. Estos procesos son denominados Autenticaci\u00f3n y Autorizaci\u00f3n respectivamente.","title":"AAPS-AUTH: Especificaciones y Protocolos de Seguridad"},{"location":"AAPS-AUTH/specifications/#autenticacion","text":"","title":"Autenticaci\u00f3n"},{"location":"AAPS-AUTH/specifications/#autorizacion","text":"","title":"Autorizaci\u00f3n"},{"location":"AAPS-AUTH/specifications/#oauth_20","text":"OAuth 2.0 es una especificaci\u00f3n que define varios m\u00e9todos de autenticaci\u00f3n y autorizaci\u00f3n. Es una especificaci\u00f3n bastante extensiva y abarca muchos casos de uso complejos.","title":"OAuth 2.0"},{"location":"AAPS-AUTH/summary/","text":"AAPS-AUTH: Res\u00famen Ejecutivo \u00b6 Bienvenido a la documentaci\u00f3n del componente de autenticaci\u00f3n y autorizaci\u00f3n AAPS-AUTH ! General \u00b6 El sistema AAPS-AUTH ... Proporciona un servicio web de autenticaci\u00f3n y autorizaci\u00f3n basado en especificaciones abiertas hacia los conjuntos de datos de la instituci\u00f3n almacenados en el componente AAPS-DATA . Ofrece puntos de acceso que le permiten a aplicaciones y sistemas externos intercambiar credenciales de autenticaci\u00f3n (nombre de usuario y contrase\u00f1a) por llaves de acceso que luego pueden ser usadas para acceder a los recursos proporcionados por el componente AAPS-API .","title":"Res\u00famen"},{"location":"AAPS-AUTH/summary/#aaps-auth_resumen_ejecutivo","text":"Bienvenido a la documentaci\u00f3n del componente de autenticaci\u00f3n y autorizaci\u00f3n AAPS-AUTH !","title":"AAPS-AUTH: Res\u00famen Ejecutivo"},{"location":"AAPS-AUTH/summary/#general","text":"El sistema AAPS-AUTH ... Proporciona un servicio web de autenticaci\u00f3n y autorizaci\u00f3n basado en especificaciones abiertas hacia los conjuntos de datos de la instituci\u00f3n almacenados en el componente AAPS-DATA . Ofrece puntos de acceso que le permiten a aplicaciones y sistemas externos intercambiar credenciales de autenticaci\u00f3n (nombre de usuario y contrase\u00f1a) por llaves de acceso que luego pueden ser usadas para acceder a los recursos proporcionados por el componente AAPS-API .","title":"General"},{"location":"AAPS-DATA/dataset/","text":"AAPS-DATA: Conjuntos de Datos \u00b6 El componente AAPS-DATA almacena y sincroniza conjuntos de datos correspondientes a distintos sectores de la AAPS. A continucaci\u00f3n describimos estos conjuntos de datos a detalle. 1 Licencias y Registros - EPSAs Registradas \u00b6 Los siguientes conjuntos de datos corresponden a las EPSAs registradas y son utilizados en los procesos de la jefatura de constituci\u00f3n de licencias y registros (L&R) de la AAPS. Las fuentes oficiales de los datos son el SIIRAyS a trav\u00e9s de su m\u00f3dulo de regularizaci\u00f3n y archivos georeferenciados administrados por el \u00e1rea de tecnolog\u00edas de la informaci\u00f3n y comunicaci\u00f3n (TIC) de la AAPS. Los conjuntos de datos relacionados a las EPSAs registradas son los siguientes: Registro EPSAs : Informaci\u00f3n general de EPSAs registradas. \u00c1reas de Prestaci\u00f3n de Servicio : Datos georeferenciados de las \u00e1reas de prestaci\u00f3n de servicio de las EPSAs registradas. Tanques de Almacenamiento : Datos georeferenciados de los tanques de almacenamiento de las EPSAs registradas. Fuentes de Abastecimiento : Datos georeferenciados de las fuentes de abastecimiento de las EPSAs registradas. 1.1 Registro EPSAs \u00b6 Este conjunto de datos corresponde a los datos proporcionados por las EPSAs a trav\u00e9s de los formularios de solucitud de registro. Es administrado por la jefatura de Constituci\u00f3n de Licencias y Registros (L&R) de la AAPS y es almacenado en la base de datos del sistema SIIRAyS, ingresado y escaneado a trav\u00e9s de su aplicaci\u00f3n web. Todos los datos del formulario de registro son inclu\u00eddos en este conjunto de datos con excepci\u00f3n de los datos georeferenciados de \u00e1reas de cobertura, fuentes de abastecimiento y tanques de almacenamiento que constituyen conjuntos de datos separados propios.","title":"Conjuntos de Datos"},{"location":"AAPS-DATA/dataset/#aaps-data_conjuntos_de_datos","text":"El componente AAPS-DATA almacena y sincroniza conjuntos de datos correspondientes a distintos sectores de la AAPS. A continucaci\u00f3n describimos estos conjuntos de datos a detalle.","title":"AAPS-DATA: Conjuntos de Datos"},{"location":"AAPS-DATA/dataset/#1_licencias_y_registros_-_epsas_registradas","text":"Los siguientes conjuntos de datos corresponden a las EPSAs registradas y son utilizados en los procesos de la jefatura de constituci\u00f3n de licencias y registros (L&R) de la AAPS. Las fuentes oficiales de los datos son el SIIRAyS a trav\u00e9s de su m\u00f3dulo de regularizaci\u00f3n y archivos georeferenciados administrados por el \u00e1rea de tecnolog\u00edas de la informaci\u00f3n y comunicaci\u00f3n (TIC) de la AAPS. Los conjuntos de datos relacionados a las EPSAs registradas son los siguientes: Registro EPSAs : Informaci\u00f3n general de EPSAs registradas. \u00c1reas de Prestaci\u00f3n de Servicio : Datos georeferenciados de las \u00e1reas de prestaci\u00f3n de servicio de las EPSAs registradas. Tanques de Almacenamiento : Datos georeferenciados de los tanques de almacenamiento de las EPSAs registradas. Fuentes de Abastecimiento : Datos georeferenciados de las fuentes de abastecimiento de las EPSAs registradas.","title":"1 Licencias y Registros - EPSAs Registradas"},{"location":"AAPS-DATA/dataset/#11_registro_epsas","text":"Este conjunto de datos corresponde a los datos proporcionados por las EPSAs a trav\u00e9s de los formularios de solucitud de registro. Es administrado por la jefatura de Constituci\u00f3n de Licencias y Registros (L&R) de la AAPS y es almacenado en la base de datos del sistema SIIRAyS, ingresado y escaneado a trav\u00e9s de su aplicaci\u00f3n web. Todos los datos del formulario de registro son inclu\u00eddos en este conjunto de datos con excepci\u00f3n de los datos georeferenciados de \u00e1reas de cobertura, fuentes de abastecimiento y tanques de almacenamiento que constituyen conjuntos de datos separados propios.","title":"1.1 Registro EPSAs"},{"location":"AAPS-DATA/db/","text":"AAPS-DATA: Base de Datos Especializada \u00b6","title":"Base de Datos Especializada"},{"location":"AAPS-DATA/db/#aaps-data_base_de_datos_especializada","text":"","title":"AAPS-DATA: Base de Datos Especializada"},{"location":"AAPS-DATA/specifications/","text":"AAPS-DATA: Est\u00e1ndares y Especificaciones de Datos \u00b6 El sistema FASTAAPS a trav\u00e9s de su servicio de acceso web de datos permite a aplicaciones acceder a los datos del sistema. El formato de intercambio de datos utilizado es JSON, el formato m\u00e1s utilizado a nivel mundial para este tipo de servicios. Acerca de JSON JSON , cuyas siglas en ingl\u00e9s significan \" J ava S cript O bject N otation\" (en espa\u00f1ol \"notaci\u00f3n de objetos JavaScript\") es un formato ligero de intercambio de datos ampliamente utilizado en la web. Es f\u00e1cil de leer para humanos y facil de interpretar para m\u00e1quinas. Es el formato m\u00e1s utilizado en servicios de acceso de datos REST-API. JSON-Schema \u00b6 Es necesario describir y especificar el formato de los archivos JSON utilizados. Para este fin utilizamos el est\u00e1ndar JSON-Schema . JSON-Schema permite describir el formato de datos JSON que sea facilmente legible por humanos y sirva de documentaci\u00f3n. Adem\u00e1s, puede ser utilizado para validar datos. La versi\u00f3n m\u00e1s reciente del est\u00e1ndar a la fecha es 2019-19 . Fechas \u00b6 Las fechas en los archivos JSON almacenados y distribuidos por el sistema FASTAAPS, son del tipo string (cadenas de texto) y acatan el est\u00e1ndar internacional para la representaci\u00f3n de fecha y hora ISO 8601 . Algunos de los formatos del est\u00e1ndar utilizados son los siguientes: A\u00f1o : AAAA (ejemplo 1997 ) A\u00f1o y Mes : AAAA-MM (ejemplo 1997-07 ) Fecha completa : AAAA-MM-DD (ejemplo 1997-07-16 ) Fecha completa m\u00e1s hora y minutos : AAAA-MM-DDThh:mmTZD (ejemplo 1997-07-16T19:20+01:00 ) Fecha completa m\u00e1s hora, minutos y segundos : AAAA-MM-DDThh:mm:ssTZD (ejemplo 1997-07-16T19:20:30+01:00 ) Donde: AAAA = A\u00f1o de cuatro d\u00edgitos MM = Mes de dos d\u00edgitos (01=Enero, etc.) DD = D\u00eda del mes de dos d\u00edgitos (01 a 31) hh = Hora de dos d\u00edgitos (00 a 23) (am/pm NO permitido) mm = Minuto de dos d\u00edgitos (00 a 59) ss = Segundo de dos d\u00edgitos (00 a 59) TZD = Zona horaria (Z o +hh:mm o -hh:mm)","title":"Est\u00e1ndares y Especificaciones"},{"location":"AAPS-DATA/specifications/#aaps-data_estandares_y_especificaciones_de_datos","text":"El sistema FASTAAPS a trav\u00e9s de su servicio de acceso web de datos permite a aplicaciones acceder a los datos del sistema. El formato de intercambio de datos utilizado es JSON, el formato m\u00e1s utilizado a nivel mundial para este tipo de servicios. Acerca de JSON JSON , cuyas siglas en ingl\u00e9s significan \" J ava S cript O bject N otation\" (en espa\u00f1ol \"notaci\u00f3n de objetos JavaScript\") es un formato ligero de intercambio de datos ampliamente utilizado en la web. Es f\u00e1cil de leer para humanos y facil de interpretar para m\u00e1quinas. Es el formato m\u00e1s utilizado en servicios de acceso de datos REST-API.","title":"AAPS-DATA: Est\u00e1ndares y Especificaciones de Datos"},{"location":"AAPS-DATA/specifications/#json-schema","text":"Es necesario describir y especificar el formato de los archivos JSON utilizados. Para este fin utilizamos el est\u00e1ndar JSON-Schema . JSON-Schema permite describir el formato de datos JSON que sea facilmente legible por humanos y sirva de documentaci\u00f3n. Adem\u00e1s, puede ser utilizado para validar datos. La versi\u00f3n m\u00e1s reciente del est\u00e1ndar a la fecha es 2019-19 .","title":"JSON-Schema"},{"location":"AAPS-DATA/specifications/#fechas","text":"Las fechas en los archivos JSON almacenados y distribuidos por el sistema FASTAAPS, son del tipo string (cadenas de texto) y acatan el est\u00e1ndar internacional para la representaci\u00f3n de fecha y hora ISO 8601 . Algunos de los formatos del est\u00e1ndar utilizados son los siguientes: A\u00f1o : AAAA (ejemplo 1997 ) A\u00f1o y Mes : AAAA-MM (ejemplo 1997-07 ) Fecha completa : AAAA-MM-DD (ejemplo 1997-07-16 ) Fecha completa m\u00e1s hora y minutos : AAAA-MM-DDThh:mmTZD (ejemplo 1997-07-16T19:20+01:00 ) Fecha completa m\u00e1s hora, minutos y segundos : AAAA-MM-DDThh:mm:ssTZD (ejemplo 1997-07-16T19:20:30+01:00 ) Donde: AAAA = A\u00f1o de cuatro d\u00edgitos MM = Mes de dos d\u00edgitos (01=Enero, etc.) DD = D\u00eda del mes de dos d\u00edgitos (01 a 31) hh = Hora de dos d\u00edgitos (00 a 23) (am/pm NO permitido) mm = Minuto de dos d\u00edgitos (00 a 59) ss = Segundo de dos d\u00edgitos (00 a 59) TZD = Zona horaria (Z o +hh:mm o -hh:mm)","title":"Fechas"},{"location":"AAPS-DATA/summary/","text":"AAPS-DATA: Res\u00famen Ejecutivo \u00b6 Bienvenido a la documentaci\u00f3n del componente de almacenamiento de datos AAPS-DATA ! General \u00b6 El sistema AAPS-DATA ... Almacena y Maneja los conjuntos de datos utilizados por el sistema FastAAPS . Sus bases de datos est\u00e1n optimizadas para responder a los pedidos realizados al servicio de datos del componente AAPS-API . Se encarga de leer los datos del sistema SIIRAyS y sincronizarlos con la base de datos de las aplicaciones. Conjuntos de Datos \u00b6 Los conjuntos de datos hacia los cuales actualmente el sistema ofrece puntos de acceso son: Direcci\u00f3n de Seguimiento Regulatorio : Variables e Indicadores de las EPSAs reguladas. Direcci\u00f3n de Regulaci\u00f3n Ambiental : Sistemas de Autoabastecimiento de Recursos H\u00eddricos (SARH). Jefatura de Licencias y Registros : EPSAs registradas. Datos georeferenciados : \u00c1reas de Prestaci\u00f3n de Servicio, Fuentes de Abastecimiento, Tanques de Almacenamiento. Los datos que ingresan al sistema AAPS-DATA son capturados de distintas fuentes: Del sistema SIIRAyS, de archivos georeferenciados y tablas mantenidas por funcionarios de la instituci\u00f3n.","title":"Res\u00famen"},{"location":"AAPS-DATA/summary/#aaps-data_resumen_ejecutivo","text":"Bienvenido a la documentaci\u00f3n del componente de almacenamiento de datos AAPS-DATA !","title":"AAPS-DATA: Res\u00famen Ejecutivo"},{"location":"AAPS-DATA/summary/#general","text":"El sistema AAPS-DATA ... Almacena y Maneja los conjuntos de datos utilizados por el sistema FastAAPS . Sus bases de datos est\u00e1n optimizadas para responder a los pedidos realizados al servicio de datos del componente AAPS-API . Se encarga de leer los datos del sistema SIIRAyS y sincronizarlos con la base de datos de las aplicaciones.","title":"General"},{"location":"AAPS-DATA/summary/#conjuntos_de_datos","text":"Los conjuntos de datos hacia los cuales actualmente el sistema ofrece puntos de acceso son: Direcci\u00f3n de Seguimiento Regulatorio : Variables e Indicadores de las EPSAs reguladas. Direcci\u00f3n de Regulaci\u00f3n Ambiental : Sistemas de Autoabastecimiento de Recursos H\u00eddricos (SARH). Jefatura de Licencias y Registros : EPSAs registradas. Datos georeferenciados : \u00c1reas de Prestaci\u00f3n de Servicio, Fuentes de Abastecimiento, Tanques de Almacenamiento. Los datos que ingresan al sistema AAPS-DATA son capturados de distintas fuentes: Del sistema SIIRAyS, de archivos georeferenciados y tablas mantenidas por funcionarios de la instituci\u00f3n.","title":"Conjuntos de Datos"},{"location":"AAPS-DATA/sync/","text":"AAPS-DATA: Servicio de Sincronizaci\u00f3n de Datos \u00b6 1. General \u00b6 El Servicio de Sincronizaci\u00f3n de Datos del componente AAPS-DATA, se encarga de sincronizar los datos del componente con los datos de diversas fuentes externas, principalmente con los datos del sistema SIIRAyS. El Servicio de Sincronizaci\u00f3n , tanto de manera autom\u00e1tica peri\u00f3dica como de manera manual a trav\u00e9s de la aplicaci\u00f3n de control de tareas, se encarga de: Acceder a estos datos, a trav\u00e9s de un driver para la base de datos Postgres. Transformar los datos al formato del sistema. Ingresar los datos al sistema FASTAAPS a trav\u00e9s del servicio de acceso. Una vez ingresados al sistema estos datos pueden ser utilizados por las aplicaciones. 2. Fuentes Originales de Datos \u00b6 Las fuentes originales de los datos de la AAPS son aquellas administradas por sus direcciones, a trav\u00e9s de sus planillas excel, sistema SIIRAyS, los archivos georeferenciados o cualquier otro m\u00e9todo considerado necesario para el manejo apropiado de sus datos. El sistema FASTAAPS simplemente almacena, distribuye y utiliza estos datos con el fin de facilitar las tareas de los funcionarios de la AAPS. 3. Funciones \u00b6 El servicio de sicronizaci\u00f3n se encarga de las siguientes funciones: Sincronizaci\u00f3n Peri\u00f3dica con el SIIRAyS : Para asegurar que los datos utilizados por las aplicaciones se encuentren actualizados y repliquen fielmente el estado del SIIRAyS, el servicio de sincronizaci\u00f3n tiene una funci\u00f3n que accesa de manera peri\u00f3dica y autom\u00e1tica a la base de datos del sistema SIIRAyS y releva los datos m\u00e1s actuales. Sincronizaci\u00f3n a Pedido : En caso de que sea necesario relizar una actualizaci\u00f3n a pedido, el servicio de sincronizaci\u00f3n ofrece esta funci\u00f3n a trav\u00e9s de su interfaz de monitoreo. 3.1 Propiedades de las Funciones \u00b6 Para asegurar la consistencia del sistema, requerimos que todas las funciones del servicio de sincronizaci\u00f3n cumplan dos caracter\u00edsticas fundamentales: Atomicidad e Idempotencia. Estas propiedades garantizan la consistencia del servicio, evitando entrar en estados inconsistentes y de esta manera reducir errores imprevistos. Atomicidad : Una funci\u00f3n at\u00f3mica es aquella que es aplicada en su totalidad o no es aplicada en lo absoluto. Es decir, al aplicar una funci\u00f3n atomica todos sus subprocesos persistentes son aplicados en el orden correcto en el caso exitoso mientras que, en caso de fallar alg\u00fan subproceso, ninguno de los subprocesos persistentes es aplicado. En lenguaje simple se puede entender a una funci\u00f3n at\u00f3mica, como una que no deja rastros \"a medias\". Idempotencia : Con una funci\u00f3n idempotente se obtiene el mismo resultado, independientemente de las veces que la funci\u00f3n sea repetida. Es decir, aplicar una funci\u00f3n idempotente una vez es equivalente a aplicarla dos o m\u00e1s veces. En caso de extender el serivicio de sincronizaci\u00f3n a\u00f1adiendo nuevas tareas, recomendamos que las nuevas funciones cumplan con estas dos caracter\u00edsticas. 4. Tecnolog\u00edas Utilizadas \u00b6 A continuaci\u00f3n describimos las tecnolog\u00edas utilizadas para el servicio de sincronizaci\u00f3n. Todas las librer\u00edas de c\u00f3digo utilizado por las siguientes herramientas son del tipo \"open source\" o \"c\u00f3digo abierto\". 4.1 Celery: Sistema de Tareas Asincr\u00f3nicas \u00b6 Celery es un conjunto de herramientas (framework) utilizado para correr tareas espec\u00edficas de manera asincr\u00f3nica, es decir, en otro proceso o inclusive en otro servidor dedicado. Normalmente es usado para correr tareas pesadas y de mantenimiento, que resultar\u00edan inconvenientes de ser inclu\u00eddas en una aplicaci\u00f3n web. El modelo de trabajo de celery gira entorno a una fila de tareas , en d\u00f3nde las aplicaciones ingresan las tareas que deben ser realizadas. Esta fila de tareas es observada por procesos trabajadores que reciben las tareas y las procesan por su cuenta. Las tareas de sincronizaci\u00f3n con la base de datos del SIIRAyS califican a ser implementadas usando el modelo de trabajo de Celery porque las siguientes caracter\u00edsticas: Las tareas de sincronizaci\u00f3n son pesadas. Pueden tardar varios segundos en ser procesadas. Las tareas de sincronizaci\u00f3n pueden ser ejecutadas de manera asincr\u00f3nica. Los objetos involucrados en estas tareas son ajenos al resto de componentes del sistema. Para el servicio de sincronizaci\u00f3n peri\u00f3dico utilizamos una herramienta automatizada para a\u00f1adir tareas a la fila en intervalos regulares. Esta herramienta es implementada en un proceso aparte y la describimos en mayor detalle m\u00e1s adelante. Celery utiliza procesos del tipo trabajador (worker) que corren de manera paralela y est\u00e1n pendientes de las tareas que tengan que ser ejecutadas. Como la mayor\u00eda de los servicios del sistema FASTAAPS y de acuerdo a los factores mencionados en la secci\u00f3n de c\u00e1lidad de c\u00f3digo , los procesos trabajadores de Celery son contenerizados con Docker. Celery no implementa la fila de tareas, en cambio, depende de los servicios de un agente de mensajer\u00eda (message broker) externo para transmitir mensajes a los procesos trabajadores. El uso de un agente de mensajer\u00eda externo tiene la ventaja de usar una tecnolog\u00eda especializada. M\u00e1s adelante explicamos el agente de mensajer\u00eda en mayor detalle. 4.2 RabbitMQ: Agente de Mensajer\u00eda (Fila de Tareas) \u00b6 El sistema de Celery depende de un agente de mensajer\u00eda (message broker) externo para implementar la fila de tareas. Existen distintos serivicios de mensajer\u00eda como por ejemplo Redis o una base de datos convencional, pero el sistema FASTAAPS utiliza el servicio de mensajer\u00eda RabbitMQ , el cual es el m\u00e1s completo en cuanto a funcionalidades de Celery. Como la mayor\u00eda de los servicios del sistema FASTAAPS y de acuerdo a los factores mencionados en la secci\u00f3n de c\u00e1lidad de c\u00f3digo , el agente de mensajer\u00eda es contenerizado con Docker. De acuerdo con estos principios de dise\u00f1o el agente de mensajer\u00eda es accesible desde los contenedores que lo requieran (trabajadores Celery) en un puerto espec\u00edfico. Para monitorear el trabajo realizado por el agente de mensajer\u00eda y facilitar su mantenimiento, inclu\u00edmos un panel de control web desde el cual un usuario de apoyo t\u00e9cnico puede monitorear la fila de tareas en tiempo real. Este servicio es parte del contenedor de RabbitMQ. 4.3 Celery-Beat: Herramienta de Tareas Peri\u00f3dicas \u00b6 Teniendo procesos trabajadores de Celery a la espera de nuevas tareas a realizar en la fila, s\u00f3lo nos hace falta una herramienta encargada de poner tareas en la fila en intervalos regulares. Precisamente esta es la funci\u00f3n de Celery-Beat , una herramienta de Celery que inicia un nuevo proceso con el fin de a\u00f1adir tareas a la fila de manera peri\u00f3dica. Como la mayor\u00eda de los servicios del sistema FASTAAPS y de acuerdo a los factores mencionados en la secci\u00f3n de c\u00e1lidad de c\u00f3digo , la herramienta de tareas peri\u00f3dicas es contenerizada con Docker. 4.4 Flower: Interfaz de Monitoreo \u00b6 Para monitorear el trabajo realizado por el servicio de sincronizaci\u00f3n y facilitar su mantenimiento, el servicio de sincronizaci\u00f3n cuenta con una interfaz de usuario web desde la cual un usuario de apoyo t\u00e9cnico puede monitorear las tareas realizadas en tiempo real. La interfaz de monitoreo fue implementada haciendo uso de la librer\u00eda Flower . Como la mayor\u00eda de los servicios del sistema FASTAAPS y de acuerdo a los factores mencionados en la secci\u00f3n de c\u00e1lidad de c\u00f3digo , la herramienta de monitoreo de tareas es contenerizado con Docker y el panel de control es expuesto en un puerto espec\u00edfico. El acceso al panel de control es considerado del tipo administrativo/t\u00e9cnico y se encuentra protegido por un sistema de autenticaci\u00f3n b\u00e1sico (nombre de usuario & contrase\u00f1a). 4.5 PgBouncer: Gestor de Conexiones a la Base de Datos PostgreSQL \u00b6 Establecer una conexi\u00f3n con un servidor PostgreSQL es notoriamente costoso: Memoria : Cada conexi\u00f3n de PostgreSQL inicia un nuevo proceso que requiere una asignaci\u00f3n de aproximadamente 10MB de memoria. Procesamiento Computacional : Iniciar nuevas conexiones adem\u00e1s implica un gasto adicional en tiempo de c\u00f3mputo. Debido a estos costos, no ser\u00eda eficiente establecer una conexi\u00f3n nueva con la base de datos cada vez que comienze una tarea de sincronizaci\u00f3n. En especial si estas conexiones son de vida corta y son destruidas una vez completada la tarea. La soluci\u00f3n a este problema es crear y mantener un grupo conexiones de larga duraci\u00f3n (connection pool) que sean reutilizadas por los procesos trabajadores. Precisamente esta es la funci\u00f3n de un gestor de conexiones (connection pooler) como PgBouncer . El flujo de trabajo es el siguiente: El gestor de conexiones establece y mantiene conexiones directas hacia la base de datos del SIIRAyS y proporciona estas conexiones como servicio. Las tareas de Celery se conectan con el gestor como si este fuera la base de datos y realizan sus consultas. El gestor utiliza una de las conexiones que mantiene para realizar el pedido a la base de datos real y retorna el resultado de la consulta a la tarea. La conexi\u00f3n es retornada al grupo de conexiones para que esta pueda ser utilizada nuevamente. Como la mayor\u00eda de los servicios del sistema FASTAAPS y de acuerdo a los factores mencionados en la secci\u00f3n de c\u00e1lidad de c\u00f3digo , el servicio de gesti\u00f3n de conexiones es contenerizado con Docker. 4.3 PsycoPG2: Driver de PostgreSQL \u00b6 4.4 Requests: Cliente HTTP \u00b6 5. Detalles de Implementaci\u00f3n \u00b6 El servicio de sincronizaci\u00f3n est\u00e1 implementado a trav\u00e9s de los siguientes servicios Docker: Nombre del Servicio Descripci\u00f3n Tecnolog\u00eda Utilizada rabbitmq Agente de mensajer\u00eda (message broker) RabbitMQ celery Proceso trabajador de Celery Celery Worker flower Herramienta de monitorero de Celery Flower beat Herramienta de tareas peri\u00f3dicas de Celery Celery Beat pgbouncer Gestor de conexiones (connection pooler) PgBouncer Cada servicio corre en un proceso aislado, pero exponen los siguientes puertos dentro del servidor: Puerto Protocolo Servicio Docker Descripci\u00f3n 5672 AMQP rabbitmq Puerto de Mensajer\u00eda 15678 HTTP rabbitmq Panel de Control de RabbitMQ 5555 HTTP celery_flower Panel de Control de Celery Tecnolog\u00edas Utilizadas \u00b6","title":"Servicio de Sincronizaci\u00f3n"},{"location":"AAPS-DATA/sync/#aaps-data_servicio_de_sincronizacion_de_datos","text":"","title":"AAPS-DATA: Servicio de Sincronizaci\u00f3n de Datos"},{"location":"AAPS-DATA/sync/#1_general","text":"El Servicio de Sincronizaci\u00f3n de Datos del componente AAPS-DATA, se encarga de sincronizar los datos del componente con los datos de diversas fuentes externas, principalmente con los datos del sistema SIIRAyS. El Servicio de Sincronizaci\u00f3n , tanto de manera autom\u00e1tica peri\u00f3dica como de manera manual a trav\u00e9s de la aplicaci\u00f3n de control de tareas, se encarga de: Acceder a estos datos, a trav\u00e9s de un driver para la base de datos Postgres. Transformar los datos al formato del sistema. Ingresar los datos al sistema FASTAAPS a trav\u00e9s del servicio de acceso. Una vez ingresados al sistema estos datos pueden ser utilizados por las aplicaciones.","title":"1. General"},{"location":"AAPS-DATA/sync/#2_fuentes_originales_de_datos","text":"Las fuentes originales de los datos de la AAPS son aquellas administradas por sus direcciones, a trav\u00e9s de sus planillas excel, sistema SIIRAyS, los archivos georeferenciados o cualquier otro m\u00e9todo considerado necesario para el manejo apropiado de sus datos. El sistema FASTAAPS simplemente almacena, distribuye y utiliza estos datos con el fin de facilitar las tareas de los funcionarios de la AAPS.","title":"2. Fuentes Originales de Datos"},{"location":"AAPS-DATA/sync/#3_funciones","text":"El servicio de sicronizaci\u00f3n se encarga de las siguientes funciones: Sincronizaci\u00f3n Peri\u00f3dica con el SIIRAyS : Para asegurar que los datos utilizados por las aplicaciones se encuentren actualizados y repliquen fielmente el estado del SIIRAyS, el servicio de sincronizaci\u00f3n tiene una funci\u00f3n que accesa de manera peri\u00f3dica y autom\u00e1tica a la base de datos del sistema SIIRAyS y releva los datos m\u00e1s actuales. Sincronizaci\u00f3n a Pedido : En caso de que sea necesario relizar una actualizaci\u00f3n a pedido, el servicio de sincronizaci\u00f3n ofrece esta funci\u00f3n a trav\u00e9s de su interfaz de monitoreo.","title":"3. Funciones"},{"location":"AAPS-DATA/sync/#31_propiedades_de_las_funciones","text":"Para asegurar la consistencia del sistema, requerimos que todas las funciones del servicio de sincronizaci\u00f3n cumplan dos caracter\u00edsticas fundamentales: Atomicidad e Idempotencia. Estas propiedades garantizan la consistencia del servicio, evitando entrar en estados inconsistentes y de esta manera reducir errores imprevistos. Atomicidad : Una funci\u00f3n at\u00f3mica es aquella que es aplicada en su totalidad o no es aplicada en lo absoluto. Es decir, al aplicar una funci\u00f3n atomica todos sus subprocesos persistentes son aplicados en el orden correcto en el caso exitoso mientras que, en caso de fallar alg\u00fan subproceso, ninguno de los subprocesos persistentes es aplicado. En lenguaje simple se puede entender a una funci\u00f3n at\u00f3mica, como una que no deja rastros \"a medias\". Idempotencia : Con una funci\u00f3n idempotente se obtiene el mismo resultado, independientemente de las veces que la funci\u00f3n sea repetida. Es decir, aplicar una funci\u00f3n idempotente una vez es equivalente a aplicarla dos o m\u00e1s veces. En caso de extender el serivicio de sincronizaci\u00f3n a\u00f1adiendo nuevas tareas, recomendamos que las nuevas funciones cumplan con estas dos caracter\u00edsticas.","title":"3.1 Propiedades de las Funciones"},{"location":"AAPS-DATA/sync/#4_tecnologias_utilizadas","text":"A continuaci\u00f3n describimos las tecnolog\u00edas utilizadas para el servicio de sincronizaci\u00f3n. Todas las librer\u00edas de c\u00f3digo utilizado por las siguientes herramientas son del tipo \"open source\" o \"c\u00f3digo abierto\".","title":"4. Tecnolog\u00edas Utilizadas"},{"location":"AAPS-DATA/sync/#41_celery_sistema_de_tareas_asincronicas","text":"Celery es un conjunto de herramientas (framework) utilizado para correr tareas espec\u00edficas de manera asincr\u00f3nica, es decir, en otro proceso o inclusive en otro servidor dedicado. Normalmente es usado para correr tareas pesadas y de mantenimiento, que resultar\u00edan inconvenientes de ser inclu\u00eddas en una aplicaci\u00f3n web. El modelo de trabajo de celery gira entorno a una fila de tareas , en d\u00f3nde las aplicaciones ingresan las tareas que deben ser realizadas. Esta fila de tareas es observada por procesos trabajadores que reciben las tareas y las procesan por su cuenta. Las tareas de sincronizaci\u00f3n con la base de datos del SIIRAyS califican a ser implementadas usando el modelo de trabajo de Celery porque las siguientes caracter\u00edsticas: Las tareas de sincronizaci\u00f3n son pesadas. Pueden tardar varios segundos en ser procesadas. Las tareas de sincronizaci\u00f3n pueden ser ejecutadas de manera asincr\u00f3nica. Los objetos involucrados en estas tareas son ajenos al resto de componentes del sistema. Para el servicio de sincronizaci\u00f3n peri\u00f3dico utilizamos una herramienta automatizada para a\u00f1adir tareas a la fila en intervalos regulares. Esta herramienta es implementada en un proceso aparte y la describimos en mayor detalle m\u00e1s adelante. Celery utiliza procesos del tipo trabajador (worker) que corren de manera paralela y est\u00e1n pendientes de las tareas que tengan que ser ejecutadas. Como la mayor\u00eda de los servicios del sistema FASTAAPS y de acuerdo a los factores mencionados en la secci\u00f3n de c\u00e1lidad de c\u00f3digo , los procesos trabajadores de Celery son contenerizados con Docker. Celery no implementa la fila de tareas, en cambio, depende de los servicios de un agente de mensajer\u00eda (message broker) externo para transmitir mensajes a los procesos trabajadores. El uso de un agente de mensajer\u00eda externo tiene la ventaja de usar una tecnolog\u00eda especializada. M\u00e1s adelante explicamos el agente de mensajer\u00eda en mayor detalle.","title":"4.1 Celery: Sistema de Tareas Asincr\u00f3nicas"},{"location":"AAPS-DATA/sync/#42_rabbitmq_agente_de_mensajeria_fila_de_tareas","text":"El sistema de Celery depende de un agente de mensajer\u00eda (message broker) externo para implementar la fila de tareas. Existen distintos serivicios de mensajer\u00eda como por ejemplo Redis o una base de datos convencional, pero el sistema FASTAAPS utiliza el servicio de mensajer\u00eda RabbitMQ , el cual es el m\u00e1s completo en cuanto a funcionalidades de Celery. Como la mayor\u00eda de los servicios del sistema FASTAAPS y de acuerdo a los factores mencionados en la secci\u00f3n de c\u00e1lidad de c\u00f3digo , el agente de mensajer\u00eda es contenerizado con Docker. De acuerdo con estos principios de dise\u00f1o el agente de mensajer\u00eda es accesible desde los contenedores que lo requieran (trabajadores Celery) en un puerto espec\u00edfico. Para monitorear el trabajo realizado por el agente de mensajer\u00eda y facilitar su mantenimiento, inclu\u00edmos un panel de control web desde el cual un usuario de apoyo t\u00e9cnico puede monitorear la fila de tareas en tiempo real. Este servicio es parte del contenedor de RabbitMQ.","title":"4.2 RabbitMQ: Agente de Mensajer\u00eda (Fila de Tareas)"},{"location":"AAPS-DATA/sync/#43_celery-beat_herramienta_de_tareas_periodicas","text":"Teniendo procesos trabajadores de Celery a la espera de nuevas tareas a realizar en la fila, s\u00f3lo nos hace falta una herramienta encargada de poner tareas en la fila en intervalos regulares. Precisamente esta es la funci\u00f3n de Celery-Beat , una herramienta de Celery que inicia un nuevo proceso con el fin de a\u00f1adir tareas a la fila de manera peri\u00f3dica. Como la mayor\u00eda de los servicios del sistema FASTAAPS y de acuerdo a los factores mencionados en la secci\u00f3n de c\u00e1lidad de c\u00f3digo , la herramienta de tareas peri\u00f3dicas es contenerizada con Docker.","title":"4.3 Celery-Beat: Herramienta de Tareas Peri\u00f3dicas"},{"location":"AAPS-DATA/sync/#44_flower_interfaz_de_monitoreo","text":"Para monitorear el trabajo realizado por el servicio de sincronizaci\u00f3n y facilitar su mantenimiento, el servicio de sincronizaci\u00f3n cuenta con una interfaz de usuario web desde la cual un usuario de apoyo t\u00e9cnico puede monitorear las tareas realizadas en tiempo real. La interfaz de monitoreo fue implementada haciendo uso de la librer\u00eda Flower . Como la mayor\u00eda de los servicios del sistema FASTAAPS y de acuerdo a los factores mencionados en la secci\u00f3n de c\u00e1lidad de c\u00f3digo , la herramienta de monitoreo de tareas es contenerizado con Docker y el panel de control es expuesto en un puerto espec\u00edfico. El acceso al panel de control es considerado del tipo administrativo/t\u00e9cnico y se encuentra protegido por un sistema de autenticaci\u00f3n b\u00e1sico (nombre de usuario & contrase\u00f1a).","title":"4.4 Flower: Interfaz de Monitoreo"},{"location":"AAPS-DATA/sync/#45_pgbouncer_gestor_de_conexiones_a_la_base_de_datos_postgresql","text":"Establecer una conexi\u00f3n con un servidor PostgreSQL es notoriamente costoso: Memoria : Cada conexi\u00f3n de PostgreSQL inicia un nuevo proceso que requiere una asignaci\u00f3n de aproximadamente 10MB de memoria. Procesamiento Computacional : Iniciar nuevas conexiones adem\u00e1s implica un gasto adicional en tiempo de c\u00f3mputo. Debido a estos costos, no ser\u00eda eficiente establecer una conexi\u00f3n nueva con la base de datos cada vez que comienze una tarea de sincronizaci\u00f3n. En especial si estas conexiones son de vida corta y son destruidas una vez completada la tarea. La soluci\u00f3n a este problema es crear y mantener un grupo conexiones de larga duraci\u00f3n (connection pool) que sean reutilizadas por los procesos trabajadores. Precisamente esta es la funci\u00f3n de un gestor de conexiones (connection pooler) como PgBouncer . El flujo de trabajo es el siguiente: El gestor de conexiones establece y mantiene conexiones directas hacia la base de datos del SIIRAyS y proporciona estas conexiones como servicio. Las tareas de Celery se conectan con el gestor como si este fuera la base de datos y realizan sus consultas. El gestor utiliza una de las conexiones que mantiene para realizar el pedido a la base de datos real y retorna el resultado de la consulta a la tarea. La conexi\u00f3n es retornada al grupo de conexiones para que esta pueda ser utilizada nuevamente. Como la mayor\u00eda de los servicios del sistema FASTAAPS y de acuerdo a los factores mencionados en la secci\u00f3n de c\u00e1lidad de c\u00f3digo , el servicio de gesti\u00f3n de conexiones es contenerizado con Docker.","title":"4.5 PgBouncer: Gestor de Conexiones a la Base de Datos PostgreSQL"},{"location":"AAPS-DATA/sync/#43_psycopg2_driver_de_postgresql","text":"","title":"4.3 PsycoPG2: Driver de PostgreSQL"},{"location":"AAPS-DATA/sync/#44_requests_cliente_http","text":"","title":"4.4 Requests: Cliente HTTP"},{"location":"AAPS-DATA/sync/#5_detalles_de_implementacion","text":"El servicio de sincronizaci\u00f3n est\u00e1 implementado a trav\u00e9s de los siguientes servicios Docker: Nombre del Servicio Descripci\u00f3n Tecnolog\u00eda Utilizada rabbitmq Agente de mensajer\u00eda (message broker) RabbitMQ celery Proceso trabajador de Celery Celery Worker flower Herramienta de monitorero de Celery Flower beat Herramienta de tareas peri\u00f3dicas de Celery Celery Beat pgbouncer Gestor de conexiones (connection pooler) PgBouncer Cada servicio corre en un proceso aislado, pero exponen los siguientes puertos dentro del servidor: Puerto Protocolo Servicio Docker Descripci\u00f3n 5672 AMQP rabbitmq Puerto de Mensajer\u00eda 15678 HTTP rabbitmq Panel de Control de RabbitMQ 5555 HTTP celery_flower Panel de Control de Celery","title":"5. Detalles de Implementaci\u00f3n"},{"location":"AAPS-DATA/sync/#tecnologias_utilizadas","text":"","title":"Tecnolog\u00edas Utilizadas"},{"location":"AAPS-LAB/summary/","text":"AAPS-LAB: Res\u00famen Ejecutivo \u00b6 Bienvenido a la documentaci\u00f3n del componente de aplicaciones interactivas AAPS-LAB ! General \u00b6 El componente AAPS-LAB ... Ofrece a sus usuarios aplicaciones interacivas de visualizaci\u00f3n y manejo de datos. Ofrece dos tipos de acceso a las aplicaciones de usuarios: Un programa de escritorio: AAPS-LAB (desktop) . Una aplicaci\u00f3n web: AAPS-LAB (web) . Ofrece una aplicaci\u00f3n web de manejo de datos (creaci\u00f3n, acceso, edici\u00f3n y eliminaci\u00f3n) para apoyar las labores de los administradores de datos ( AAPS-ADMIN ). Acceso a los Datos \u00b6 El componente AAPS-LAB ... Hace uso del servicio de datos del componente AAPS-API para acceder a los datos del componente AAPS-DATA . Hace uso del servicio de autenticaci\u00f3n del componente AAPS-AUTH para validar la identidad de sus usuarios y controlar sus permisos en el sistema.","title":"Res\u00famen"},{"location":"AAPS-LAB/summary/#aaps-lab_resumen_ejecutivo","text":"Bienvenido a la documentaci\u00f3n del componente de aplicaciones interactivas AAPS-LAB !","title":"AAPS-LAB: Res\u00famen Ejecutivo"},{"location":"AAPS-LAB/summary/#general","text":"El componente AAPS-LAB ... Ofrece a sus usuarios aplicaciones interacivas de visualizaci\u00f3n y manejo de datos. Ofrece dos tipos de acceso a las aplicaciones de usuarios: Un programa de escritorio: AAPS-LAB (desktop) . Una aplicaci\u00f3n web: AAPS-LAB (web) . Ofrece una aplicaci\u00f3n web de manejo de datos (creaci\u00f3n, acceso, edici\u00f3n y eliminaci\u00f3n) para apoyar las labores de los administradores de datos ( AAPS-ADMIN ).","title":"General"},{"location":"AAPS-LAB/summary/#acceso_a_los_datos","text":"El componente AAPS-LAB ... Hace uso del servicio de datos del componente AAPS-API para acceder a los datos del componente AAPS-DATA . Hace uso del servicio de autenticaci\u00f3n del componente AAPS-AUTH para validar la identidad de sus usuarios y controlar sus permisos en el sistema.","title":"Acceso a los Datos"},{"location":"FASTAAPS/deployment/","text":"Puesta en Producci\u00f3n (Instalaci\u00f3n del Sistema en Servidores) \u00b6 En esta secci\u00f3n se dan las instrucciones para que el personal de apoyo t\u00e9cnico (sector TIC) pueda levantar el sistema en servidores. Esta acci\u00f3n puede resultar necesaria en caso de caida de los servidores, cambio de servidores o simplemente si por alg\u00fan motivo se desea instalar el sistema nuevamente o en otro servidor. Requisitos \u00b6 En teor\u00eda, el \u00fanico requerimiento para levantar el sistema es un sistema operativo linux con acceso a internet, suficiente espacio y capacidad de c\u00f3mputo y que tenga Docker instalado. ( Requisitos del Servidor ) El sistema fue probado en producci\u00f3n una m\u00e1quina virtual con las siguientes caracter\u00edsticas, por lo que se recomienda usar un servidor con las siguientes caracter\u00edsticas o de mayor capacidad: Propiedad Valor Sistema Operativo Ubuntu 18.04.3 LTS (bionic) Arquitectura: x86_64 Memoria (total): 3.84 GB Memoria (disponible): 3.46 GB N\u00famero de N\u00facleos: 2 ( Interfaz ) Para realizar la instalaci\u00f3n se deber\u00e1 poder ejecutar comandos en una l\u00ednea de comandos, ya sea de manera directa o a trav\u00e9s de una conexi\u00f3n remota (SSH). Es necesario contar con acceso del tipo root (superusuario) en el sistema para poder correr comandos sudo . ( IP p\u00fablica ) Para que los usuarios del sistema puedan acceder a \u00e9l a trav\u00e9s de Internet, necesitaremos una IP p\u00fablica que redirija a nuestro servidor. Paso 1: Instalar Docker y Docker-Compose \u00b6 Docker y Docker-Compose simplifican bastante la instalaci\u00f3n y el mantenimiento del sistema. Existen scripts de instalaci\u00f3n convenientes que reducir\u00edan esta secci\u00f3n a un par de comandos, pero oficialmente estos m\u00e9todos no son recomendados en producci\u00f3n por lo que se sugiere realizar la instalaci\u00f3n convencional descrita a continuaci\u00f3n. Para instalar estas herramienas corremos los siguientes comandos: Actualizamos el gestor de paquetes del sistema: sudo apt-get update sudo apt-get upgrade Instalaci\u00f3n de Docker Engine . En caso que se hayan instalado versiones antig\u00fcas de docker, las removemos. Es normal que diga que no existen los paquetes. sudo apt-get remove docker docker-engine docker.io containerd run Instalamos algunos paquetes que nos permitir\u00e1n usar los repositorios v\u00eda HTTPS. sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common A\u00f1adimos la llave GPG oficial de Docker. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Verificamos la integridad de la llave buscando su huella digital . El valor de la llave p\u00fablica ( pub ) mostrada en el output debe igualar a 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 . sudo apt-key fingerprint 0EBFCD88 A\u00f1adimos el repositorio de Docker para Ubuntu. sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Actualizamos los repositorios del gestor de paquetes apt . sudo apt-get update Finalmente instalamos Docker. sudo apt-get install docker-ce docker-ce-cli containerd.io Y verificamos que haya sido instalado correctamente. sudo docker run hello-world Instalaci\u00f3n de Docker Compose . Descargamos la \u00faltima versi\u00f3n estable de Docker Compose. sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Le damos permisos de ejecutable al archivo descargado. sudo chmod +x /usr/local/bin/docker-compose Finalmente verificamos que Docker Compose sea accesible y est\u00e9 instalado. docker-compose --help Paso 2: Descargar el Repositorio \u00b6 El c\u00f3digo fuente se encuentra en un repositorio de Github , el cual contiene todo lo necesario para levantar el sistema. En este paso lo descargamos en el servidor. Primero, instalamos Git en caso de que no se encuentre instalado en el servidor. sudo apt install git Ahora clonamos el repositorio desde Github. git clone https://github.com/sergio-chumacero/aapsapi-docker.git Esto crear\u00e1 una carpeta en el directorio actual de nombre aapsapi-docker . Nota La direcci\u00f3n dentro del sistema de la carpeta con el c\u00f3digo no es relevante para la instalaci\u00f3n. Ingresamos a la carpeta del c\u00f3digo clonada. cd aapsapi-docker Paso 3: Configuraci\u00f3n del Sistema \u00b6 Antes de correr el sistema, debemos decidir algunas variables de configuraci\u00f3n que, por seguridad, no son inclu\u00eddas en el c\u00f3digo y por lo tanto deben ser editadas \"manualmente\". Para editar texto a trav\u00e9s de la consola de comandos necesitaremos un editor de texto (Vim, Emacs, Nano, Micro, etc.). Dejamos la elecci\u00f3n de un editor de texto a elecci\u00f3n del funcionario, pero inclu\u00edmos la instalaci\u00f3n de micro como recomendaci\u00f3n personal. Instalar micro (click para abrir) Micro es un editor de texto en la consola de comandos. Podemos usarlo para editar los archivos de configuraci\u00f3n del sistema. Para instalarlo, podemos usar un script que crea un ejecutable en la carpeta donde estemos. curl https://getmic.ro | bash Para usarlo para abrir y editar un archivo (por ejemplo el archivo ejemplo.txt en la carpeta actual) basta con usar el ejecutable. ./micro ejemplo.txt Esto abrir\u00e1 el archivo en modo edici\u00f3n. Para guardar cambios se puede usar CTRL + S y para salir del editor CTRL + Q . Los archivos que modificaremos son config.env y docker-compose.yml . config.env : Siguiendo las normas de dise\u00f1o de la secci\u00f3n de calidad de c\u00f3digo , utilizamos variables de ambiente para configurar los servicios del sistema y las agrupamos en un solo archivo para facilitar su manejo. Este archivo define variables de ambiente que ser\u00e1n incluidas dentro de los contenedores docker y modificar\u00e1n su comportamiento. Es importante que, con excepci\u00f3n de las l\u00edneas de comentario (las que inician con el s\u00edmbolo # ), las l\u00edneas en este archivo no pueden contener espacios . docker-compose.yml : Este archivo define y configura los servicios docker, sus propiedades y los aspectos relacionados a la interconectividad de los contenedores Docker entre ellos y con los usuarios. Su uso es extenso y en caso de dudas, recomendamos recurrir a la documentaci\u00f3n oficial de referencia. En este archivo tambi\u00e9n se incluye la configuraci\u00f3n del router web Traefik que dirije los pedidos de los clientes a los servicios adecuados del sistema. Descripci\u00f3n de las Variables de Configuraci\u00f3n del Archivo config.env \u00b6 El archivo config.env incluye comentarios indicando la funcionalidad de las variables de configuraci\u00f3n, que deber\u00edan ser suficientemente intuitivas. Pero en caso de dudas, describimos las variables a continuaci\u00f3n tambi\u00e9n. Configuraci\u00f3n de Conexi\u00f3n a Django \u00b6 DJANGO_SECRET_KEY ( LLave secreta de Django ): Django utiliza m\u00e9todos de encriptaci\u00f3n que requieren de una cadena de caracteres aleatorios. Por motivos de seguridad no podemos incluir esta cadena en el repositorio, por lo que debe ser generada en el momento de la instalaci\u00f3n. Esta llave no puede ser publicada , porque esto vulnerar\u00eda las contrase\u00f1as encriptadas en la base de datos. Hay p\u00e1ginas web que generan cadenas v\u00e1lidas de manera autom\u00e1tica. Ejemplo de cadena v\u00e1lida ( no usar en producci\u00f3n ): gcynb!y-^2+40794mfyien8_fl*bkue6!^&-v39959-w-&v&-x DJANGO_ALLOWED_HOSTS ( URLs permitidas ): Por seguridad, es conveniente limitar las URLs desde las cuales se puede servir la aplicaci\u00f3n. El valor de esta variable puede ser una lista sin espacios delimitada por comas. Por ejemplo: 200.185.45.65,aaps-lab.ml . En \u00faltima instancia o para hacer la prueba es posible permitir todas las URLs asignandole a esta variable el valor * (no recomendado en producci\u00f3n). Configuraci\u00f3n de Conexi\u00f3n a la Base de Datos \u00b6 Estas variables son utilizadas por la aplicaci\u00f3n Django para establecer una conexi\u00f3n con la base de datos Postgres que ser\u00e1 usada en producci\u00f3n. DJANGO_DB_HOST ( URL del servicio Postgres ): URL que usar\u00e1 Django para conectarse con el servicio Postgres. S\u00f3lo modificar en caso de usar una base de datos externa. Valor por default: django_postgres . Con docker conectamos los contenedores en una red com\u00fan y les asignamos dominios internos (hostnames) a cada servicio docker. DJANGO_DB_PORT ( Puerto del servicio Postgres (para Django) ): Puerto que usar\u00e1 Django para conectarse con el servicio Postgres. Solo modificar en caso de no usar la base de datos est\u00e1ndar. Valor por default: 5432 . El servicio Docker de base de datos postgres est\u00e1 configurado para usar este puerto por default. DJANGO_DB_USER ( Nombre de usuario de Postgres (para Django) ): El nombre de usuario que usar\u00e1 la aplicaci\u00f3n Django para conectarse a la base de datos. DJANGO_DB_USER ( Contrase\u00f1a de usuario de Postgres (para Django) ): La contrase\u00f1a que usar\u00e1 la aplicaci\u00f3n Django para conectarse a la base de datos. DJANGO_DB_NAME ( Nombre de la base de datos Postgres (para Django) ): El nombre de la base de datos que usar\u00e1 Django para almacenar sus datos. DJANGO_CONN_MAX_AGE ( Tiempo de Conexi\u00f3n a la base de datos ): Al establecer una conexi\u00f3n con la base de datos, esta ser\u00e1 persistida por este tiempo con el fin de poder ser reutilizada. Valor en segundos. Admite decimales con punto. Valor por default: 60.0 . Configuraci\u00f3n de usuario inicial PostgreSQL \u00b6 POSTGRES_USER ( Nombre del usuario inicial de Postgres. ) POSTGRES_PASSWORD ( Contrase\u00f1a del usuario inicial de Postgres. ) Configuraci\u00f3n de usuario inicial PGAdmin \u00b6 Para facilitar el manejo de la base de datos, se incluye el servicio de PGAdmin4. PGADMIN_DEFAULT_EMAIL ( Mail de ingreso a PGAdmin ) PGADMIN_DEFAULT_PASSWORD ( Contrase\u00f1a de ingreso a PGAdmin ) Datos de Acceso para los Usuarios \u00b6 Para facilitar el trabajo de instalaci\u00f3n, se automatiz\u00f3 la creaci\u00f3n de usuarios y permisos en el sistema. Los usuarios y permisos tambi\u00e9n pueden ser creados, modificados y eliminados desde la aplicaci\u00f3n administrativa, cuando esta est\u00e9 en funcionamiento. De manera autom\u00e1tica se crean los siguientes usuarios: Administrador : Tiene todos los permisos. Es usado para administrar a los otros usuarios. Puede acceder a la aplicaci\u00f3n adminsitrativa. Administrador DRA : Tiene todos los permisos sobre los datos de la direcci\u00f3n DRA-RH (SARH). Puede acceder a la aplicaci\u00f3n adminsitrativa. Administrador DER : Tiene todos los permisos sobre los datos de la direcci\u00f3n DER (Variables, Indicadores y POA). Puede acceder a la aplicaci\u00f3n adminsitrativa. Usuario DRA : Tiene permisos de s\u00f3lo-lectura a los de la direcci\u00f3n DRA-RH. No puede acceder a la aplicaci\u00f3n administrativa. Usuario DER : Tiene permisos de s\u00f3lo-lectura a los de la direcci\u00f3n DER. No puede acceder a la aplicaci\u00f3n administrativa. DJANGO_ADMIN_USER , DJANGO_ADMIN_DRA_USER , DJANGO_USUARIO_DRA_USER , DJANGO_ADMIN_DER_USER , DJANGO_USUARIO_DER_USER ( Nombres de los usuarios ): Los nombres de los usuarios usados para el log-in. DJANGO_ADMIN_PASSWORD , DJANGO_ADMIN_DRA_PASSWORD , DJANGO_USUARIO_DRA_PASSWORD , DJANGO_ADMIN_DER_PASSWORD , DJANGO_USUARIO_DER_PASSWORD ( Contrase\u00f1as de los usuarios ): Las contrase\u00f1as de los usuario para el log-in. Los usuarios pueden cambiar sus contrase\u00f1as desde la p\u00e1gina administrativa. DJANGO_ADMIN_MAIL , DJANGO_ADMIN_DRA_MAIL , DJANGO_USUARIO_DRA_MAIL , DJANGO_ADMIN_DER_MAIL , DJANGO_USUARIO_DER_MAIL ( Mail de los usuarios ): Emails de referencia. Los usuarios pueden cambiar sus direcciones de correo elecr\u00f3nico desde la p\u00e1gina administrativa. Configuraci\u00f3n del archivo docker-compose.yml \u00b6 La \u00fanica configuraci\u00f3n necesaria en este archivo es la de la URL y dominios del servidor. Estas se encuentran en el servicio django en la secci\u00f3n labels . En espec\u00edfico Host(...) . Las distintas URLs y dominiso pueden ser separados por comas. services : ... labels : - \"traefik.enable=true\" - \"traefik.http.routers.django_router.rule=Host(`192.168.99.101`,`aasp-lab.ml`) && PathPrefix(`/`)\" - \"traefik.http.services.django_service.loadbalancer.server.port=8000\" - \"traefik.http.routers.django_router.entrypoints=web\" Paso 4: Iniciar Servicios y Correr Scripts \u00b6 Con la configuraci\u00f3n lista, s\u00f3lo hace falta levantar los servicios. Recordamos que todos los comandos del tipo docker-compose deben ser realizados en la carpeta base del c\u00f3digo (la que contiene el archivo docker-compose.yml ). sudo docker-compose up -d La primera vez puede tardar un poco en levantar los servicios porque debe descargar y crear las im\u00e1genes de los contenedores. Una vez listo, corremos dos scripts que fueron inclu\u00eddos en los contenedores de la base de datos y de Django respectivamente. El primero ( init_db.sh ) crea la tabla de la aplicaci\u00f3n en la base de datos y le otorga los accesos necesarios al usuario. sudo docker exec -it django_postgres bash init_db.sh El segundo ( init_django.sh ) crea y corre las migraciones de la base de datos, crea los usuarios y alista los archivos est\u00e1ticos. sudo docker exec -it django bash init_django.sh Paso 5: Reiniciar los Contenedores \u00b6 Finalmente s\u00f3lo hace falta reiniciar los contenedores (tambi\u00e9n en el directorio base). sudo docker-compose restart Esto concluye la instalaci\u00f3n. Ahora la aplicaci\u00f3n administrativa y el servicio REST-API son accesibles desde la IP p\u00fablica del servidor o dominios que redireccionen a esta IP. El panel de control de Postgres escucha en el puerto 5050.","title":"Instalaci\u00f3n del Sistema en Servidores"},{"location":"FASTAAPS/deployment/#puesta_en_produccion_instalacion_del_sistema_en_servidores","text":"En esta secci\u00f3n se dan las instrucciones para que el personal de apoyo t\u00e9cnico (sector TIC) pueda levantar el sistema en servidores. Esta acci\u00f3n puede resultar necesaria en caso de caida de los servidores, cambio de servidores o simplemente si por alg\u00fan motivo se desea instalar el sistema nuevamente o en otro servidor.","title":"Puesta en Producci\u00f3n (Instalaci\u00f3n del Sistema en Servidores)"},{"location":"FASTAAPS/deployment/#requisitos","text":"En teor\u00eda, el \u00fanico requerimiento para levantar el sistema es un sistema operativo linux con acceso a internet, suficiente espacio y capacidad de c\u00f3mputo y que tenga Docker instalado. ( Requisitos del Servidor ) El sistema fue probado en producci\u00f3n una m\u00e1quina virtual con las siguientes caracter\u00edsticas, por lo que se recomienda usar un servidor con las siguientes caracter\u00edsticas o de mayor capacidad: Propiedad Valor Sistema Operativo Ubuntu 18.04.3 LTS (bionic) Arquitectura: x86_64 Memoria (total): 3.84 GB Memoria (disponible): 3.46 GB N\u00famero de N\u00facleos: 2 ( Interfaz ) Para realizar la instalaci\u00f3n se deber\u00e1 poder ejecutar comandos en una l\u00ednea de comandos, ya sea de manera directa o a trav\u00e9s de una conexi\u00f3n remota (SSH). Es necesario contar con acceso del tipo root (superusuario) en el sistema para poder correr comandos sudo . ( IP p\u00fablica ) Para que los usuarios del sistema puedan acceder a \u00e9l a trav\u00e9s de Internet, necesitaremos una IP p\u00fablica que redirija a nuestro servidor.","title":"Requisitos"},{"location":"FASTAAPS/deployment/#paso_1_instalar_docker_y_docker-compose","text":"Docker y Docker-Compose simplifican bastante la instalaci\u00f3n y el mantenimiento del sistema. Existen scripts de instalaci\u00f3n convenientes que reducir\u00edan esta secci\u00f3n a un par de comandos, pero oficialmente estos m\u00e9todos no son recomendados en producci\u00f3n por lo que se sugiere realizar la instalaci\u00f3n convencional descrita a continuaci\u00f3n. Para instalar estas herramienas corremos los siguientes comandos: Actualizamos el gestor de paquetes del sistema: sudo apt-get update sudo apt-get upgrade Instalaci\u00f3n de Docker Engine . En caso que se hayan instalado versiones antig\u00fcas de docker, las removemos. Es normal que diga que no existen los paquetes. sudo apt-get remove docker docker-engine docker.io containerd run Instalamos algunos paquetes que nos permitir\u00e1n usar los repositorios v\u00eda HTTPS. sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common A\u00f1adimos la llave GPG oficial de Docker. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Verificamos la integridad de la llave buscando su huella digital . El valor de la llave p\u00fablica ( pub ) mostrada en el output debe igualar a 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 . sudo apt-key fingerprint 0EBFCD88 A\u00f1adimos el repositorio de Docker para Ubuntu. sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Actualizamos los repositorios del gestor de paquetes apt . sudo apt-get update Finalmente instalamos Docker. sudo apt-get install docker-ce docker-ce-cli containerd.io Y verificamos que haya sido instalado correctamente. sudo docker run hello-world Instalaci\u00f3n de Docker Compose . Descargamos la \u00faltima versi\u00f3n estable de Docker Compose. sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Le damos permisos de ejecutable al archivo descargado. sudo chmod +x /usr/local/bin/docker-compose Finalmente verificamos que Docker Compose sea accesible y est\u00e9 instalado. docker-compose --help","title":"Paso 1: Instalar Docker y Docker-Compose"},{"location":"FASTAAPS/deployment/#paso_2_descargar_el_repositorio","text":"El c\u00f3digo fuente se encuentra en un repositorio de Github , el cual contiene todo lo necesario para levantar el sistema. En este paso lo descargamos en el servidor. Primero, instalamos Git en caso de que no se encuentre instalado en el servidor. sudo apt install git Ahora clonamos el repositorio desde Github. git clone https://github.com/sergio-chumacero/aapsapi-docker.git Esto crear\u00e1 una carpeta en el directorio actual de nombre aapsapi-docker . Nota La direcci\u00f3n dentro del sistema de la carpeta con el c\u00f3digo no es relevante para la instalaci\u00f3n. Ingresamos a la carpeta del c\u00f3digo clonada. cd aapsapi-docker","title":"Paso 2: Descargar el Repositorio"},{"location":"FASTAAPS/deployment/#paso_3_configuracion_del_sistema","text":"Antes de correr el sistema, debemos decidir algunas variables de configuraci\u00f3n que, por seguridad, no son inclu\u00eddas en el c\u00f3digo y por lo tanto deben ser editadas \"manualmente\". Para editar texto a trav\u00e9s de la consola de comandos necesitaremos un editor de texto (Vim, Emacs, Nano, Micro, etc.). Dejamos la elecci\u00f3n de un editor de texto a elecci\u00f3n del funcionario, pero inclu\u00edmos la instalaci\u00f3n de micro como recomendaci\u00f3n personal. Instalar micro (click para abrir) Micro es un editor de texto en la consola de comandos. Podemos usarlo para editar los archivos de configuraci\u00f3n del sistema. Para instalarlo, podemos usar un script que crea un ejecutable en la carpeta donde estemos. curl https://getmic.ro | bash Para usarlo para abrir y editar un archivo (por ejemplo el archivo ejemplo.txt en la carpeta actual) basta con usar el ejecutable. ./micro ejemplo.txt Esto abrir\u00e1 el archivo en modo edici\u00f3n. Para guardar cambios se puede usar CTRL + S y para salir del editor CTRL + Q . Los archivos que modificaremos son config.env y docker-compose.yml . config.env : Siguiendo las normas de dise\u00f1o de la secci\u00f3n de calidad de c\u00f3digo , utilizamos variables de ambiente para configurar los servicios del sistema y las agrupamos en un solo archivo para facilitar su manejo. Este archivo define variables de ambiente que ser\u00e1n incluidas dentro de los contenedores docker y modificar\u00e1n su comportamiento. Es importante que, con excepci\u00f3n de las l\u00edneas de comentario (las que inician con el s\u00edmbolo # ), las l\u00edneas en este archivo no pueden contener espacios . docker-compose.yml : Este archivo define y configura los servicios docker, sus propiedades y los aspectos relacionados a la interconectividad de los contenedores Docker entre ellos y con los usuarios. Su uso es extenso y en caso de dudas, recomendamos recurrir a la documentaci\u00f3n oficial de referencia. En este archivo tambi\u00e9n se incluye la configuraci\u00f3n del router web Traefik que dirije los pedidos de los clientes a los servicios adecuados del sistema.","title":"Paso 3: Configuraci\u00f3n del Sistema"},{"location":"FASTAAPS/deployment/#descripcion_de_las_variables_de_configuracion_del_archivo_configenv","text":"El archivo config.env incluye comentarios indicando la funcionalidad de las variables de configuraci\u00f3n, que deber\u00edan ser suficientemente intuitivas. Pero en caso de dudas, describimos las variables a continuaci\u00f3n tambi\u00e9n.","title":"Descripci\u00f3n de las Variables de Configuraci\u00f3n del Archivo config.env"},{"location":"FASTAAPS/deployment/#configuracion_de_conexion_a_django","text":"DJANGO_SECRET_KEY ( LLave secreta de Django ): Django utiliza m\u00e9todos de encriptaci\u00f3n que requieren de una cadena de caracteres aleatorios. Por motivos de seguridad no podemos incluir esta cadena en el repositorio, por lo que debe ser generada en el momento de la instalaci\u00f3n. Esta llave no puede ser publicada , porque esto vulnerar\u00eda las contrase\u00f1as encriptadas en la base de datos. Hay p\u00e1ginas web que generan cadenas v\u00e1lidas de manera autom\u00e1tica. Ejemplo de cadena v\u00e1lida ( no usar en producci\u00f3n ): gcynb!y-^2+40794mfyien8_fl*bkue6!^&-v39959-w-&v&-x DJANGO_ALLOWED_HOSTS ( URLs permitidas ): Por seguridad, es conveniente limitar las URLs desde las cuales se puede servir la aplicaci\u00f3n. El valor de esta variable puede ser una lista sin espacios delimitada por comas. Por ejemplo: 200.185.45.65,aaps-lab.ml . En \u00faltima instancia o para hacer la prueba es posible permitir todas las URLs asignandole a esta variable el valor * (no recomendado en producci\u00f3n).","title":"Configuraci\u00f3n de Conexi\u00f3n a Django"},{"location":"FASTAAPS/deployment/#configuracion_de_conexion_a_la_base_de_datos","text":"Estas variables son utilizadas por la aplicaci\u00f3n Django para establecer una conexi\u00f3n con la base de datos Postgres que ser\u00e1 usada en producci\u00f3n. DJANGO_DB_HOST ( URL del servicio Postgres ): URL que usar\u00e1 Django para conectarse con el servicio Postgres. S\u00f3lo modificar en caso de usar una base de datos externa. Valor por default: django_postgres . Con docker conectamos los contenedores en una red com\u00fan y les asignamos dominios internos (hostnames) a cada servicio docker. DJANGO_DB_PORT ( Puerto del servicio Postgres (para Django) ): Puerto que usar\u00e1 Django para conectarse con el servicio Postgres. Solo modificar en caso de no usar la base de datos est\u00e1ndar. Valor por default: 5432 . El servicio Docker de base de datos postgres est\u00e1 configurado para usar este puerto por default. DJANGO_DB_USER ( Nombre de usuario de Postgres (para Django) ): El nombre de usuario que usar\u00e1 la aplicaci\u00f3n Django para conectarse a la base de datos. DJANGO_DB_USER ( Contrase\u00f1a de usuario de Postgres (para Django) ): La contrase\u00f1a que usar\u00e1 la aplicaci\u00f3n Django para conectarse a la base de datos. DJANGO_DB_NAME ( Nombre de la base de datos Postgres (para Django) ): El nombre de la base de datos que usar\u00e1 Django para almacenar sus datos. DJANGO_CONN_MAX_AGE ( Tiempo de Conexi\u00f3n a la base de datos ): Al establecer una conexi\u00f3n con la base de datos, esta ser\u00e1 persistida por este tiempo con el fin de poder ser reutilizada. Valor en segundos. Admite decimales con punto. Valor por default: 60.0 .","title":"Configuraci\u00f3n de Conexi\u00f3n a la Base de Datos"},{"location":"FASTAAPS/deployment/#configuracion_de_usuario_inicial_postgresql","text":"POSTGRES_USER ( Nombre del usuario inicial de Postgres. ) POSTGRES_PASSWORD ( Contrase\u00f1a del usuario inicial de Postgres. )","title":"Configuraci\u00f3n de usuario inicial PostgreSQL"},{"location":"FASTAAPS/deployment/#configuracion_de_usuario_inicial_pgadmin","text":"Para facilitar el manejo de la base de datos, se incluye el servicio de PGAdmin4. PGADMIN_DEFAULT_EMAIL ( Mail de ingreso a PGAdmin ) PGADMIN_DEFAULT_PASSWORD ( Contrase\u00f1a de ingreso a PGAdmin )","title":"Configuraci\u00f3n de usuario inicial PGAdmin"},{"location":"FASTAAPS/deployment/#datos_de_acceso_para_los_usuarios","text":"Para facilitar el trabajo de instalaci\u00f3n, se automatiz\u00f3 la creaci\u00f3n de usuarios y permisos en el sistema. Los usuarios y permisos tambi\u00e9n pueden ser creados, modificados y eliminados desde la aplicaci\u00f3n administrativa, cuando esta est\u00e9 en funcionamiento. De manera autom\u00e1tica se crean los siguientes usuarios: Administrador : Tiene todos los permisos. Es usado para administrar a los otros usuarios. Puede acceder a la aplicaci\u00f3n adminsitrativa. Administrador DRA : Tiene todos los permisos sobre los datos de la direcci\u00f3n DRA-RH (SARH). Puede acceder a la aplicaci\u00f3n adminsitrativa. Administrador DER : Tiene todos los permisos sobre los datos de la direcci\u00f3n DER (Variables, Indicadores y POA). Puede acceder a la aplicaci\u00f3n adminsitrativa. Usuario DRA : Tiene permisos de s\u00f3lo-lectura a los de la direcci\u00f3n DRA-RH. No puede acceder a la aplicaci\u00f3n administrativa. Usuario DER : Tiene permisos de s\u00f3lo-lectura a los de la direcci\u00f3n DER. No puede acceder a la aplicaci\u00f3n administrativa. DJANGO_ADMIN_USER , DJANGO_ADMIN_DRA_USER , DJANGO_USUARIO_DRA_USER , DJANGO_ADMIN_DER_USER , DJANGO_USUARIO_DER_USER ( Nombres de los usuarios ): Los nombres de los usuarios usados para el log-in. DJANGO_ADMIN_PASSWORD , DJANGO_ADMIN_DRA_PASSWORD , DJANGO_USUARIO_DRA_PASSWORD , DJANGO_ADMIN_DER_PASSWORD , DJANGO_USUARIO_DER_PASSWORD ( Contrase\u00f1as de los usuarios ): Las contrase\u00f1as de los usuario para el log-in. Los usuarios pueden cambiar sus contrase\u00f1as desde la p\u00e1gina administrativa. DJANGO_ADMIN_MAIL , DJANGO_ADMIN_DRA_MAIL , DJANGO_USUARIO_DRA_MAIL , DJANGO_ADMIN_DER_MAIL , DJANGO_USUARIO_DER_MAIL ( Mail de los usuarios ): Emails de referencia. Los usuarios pueden cambiar sus direcciones de correo elecr\u00f3nico desde la p\u00e1gina administrativa.","title":"Datos de Acceso para los Usuarios"},{"location":"FASTAAPS/deployment/#configuracion_del_archivo_docker-composeyml","text":"La \u00fanica configuraci\u00f3n necesaria en este archivo es la de la URL y dominios del servidor. Estas se encuentran en el servicio django en la secci\u00f3n labels . En espec\u00edfico Host(...) . Las distintas URLs y dominiso pueden ser separados por comas. services : ... labels : - \"traefik.enable=true\" - \"traefik.http.routers.django_router.rule=Host(`192.168.99.101`,`aasp-lab.ml`) && PathPrefix(`/`)\" - \"traefik.http.services.django_service.loadbalancer.server.port=8000\" - \"traefik.http.routers.django_router.entrypoints=web\"","title":"Configuraci\u00f3n del archivo docker-compose.yml"},{"location":"FASTAAPS/deployment/#paso_4_iniciar_servicios_y_correr_scripts","text":"Con la configuraci\u00f3n lista, s\u00f3lo hace falta levantar los servicios. Recordamos que todos los comandos del tipo docker-compose deben ser realizados en la carpeta base del c\u00f3digo (la que contiene el archivo docker-compose.yml ). sudo docker-compose up -d La primera vez puede tardar un poco en levantar los servicios porque debe descargar y crear las im\u00e1genes de los contenedores. Una vez listo, corremos dos scripts que fueron inclu\u00eddos en los contenedores de la base de datos y de Django respectivamente. El primero ( init_db.sh ) crea la tabla de la aplicaci\u00f3n en la base de datos y le otorga los accesos necesarios al usuario. sudo docker exec -it django_postgres bash init_db.sh El segundo ( init_django.sh ) crea y corre las migraciones de la base de datos, crea los usuarios y alista los archivos est\u00e1ticos. sudo docker exec -it django bash init_django.sh","title":"Paso 4: Iniciar Servicios y Correr Scripts"},{"location":"FASTAAPS/deployment/#paso_5_reiniciar_los_contenedores","text":"Finalmente s\u00f3lo hace falta reiniciar los contenedores (tambi\u00e9n en el directorio base). sudo docker-compose restart Esto concluye la instalaci\u00f3n. Ahora la aplicaci\u00f3n administrativa y el servicio REST-API son accesibles desde la IP p\u00fablica del servidor o dominios que redireccionen a esta IP. El panel de control de Postgres escucha en el puerto 5050.","title":"Paso 5: Reiniciar los Contenedores"},{"location":"FASTAAPS/docker/","text":"Docker: Tecnolog\u00edas de Contenerizaci\u00f3n \u00b6 1. Informaci\u00f3n General: \u00bfQu\u00e9 es y para qu\u00e9 sirve Docker? \u00b6 Docker es una plataforma que permite a los desarrolladores empaquetar y correr aplicaciones v\u00eda interfaces estandarizadas. Docker est\u00e1 basado en tecnolog\u00edas de virtualizaci\u00f3n a nivel de sistema operativo que empaqueta software en sus propios entornos virtuales denominados contenedores . A diferencia de una m\u00e1quina virtual , un contenedor es m\u00e1s eficiente y ligero porque no replica una m\u00e1quina f\u00edsica abstracta, sino que simplemente replica un sistema operativo abstracto. De esta manera se puede correr muchos m\u00e1s contenedores en un mismo servidor que maquinas virtuales gozando de las ventajas de aislar cada aplicaci\u00f3n en su entorno individual. El uso de contenedores Docker para la puesta en producci\u00f3n reduce el trabajo de instalaci\u00f3n y el uso de scripts de instalaci\u00f3n. Un contenedor Docker es un proceso aislado que corre en el entorno del usuario del sistema operativo y comparte el n\u00facleo (kernel) del sistema con otros procesos. M\u00faltiples contenedores pueden correr en la misma m\u00e1quina, cada uno corriendo su aplicaci\u00f3n en un proceso aislado. La ventaja de utilizar tecnolog\u00edas de contenerizaci\u00f3n para los servicios en producci\u00f3n son: Bajo \u00edndice de acoplamiento (loose coupling) : Al aislar cada aplicaci\u00f3n en su propio entorno virtual, estas son independientes las unas de las otras. Las dependencias de una no interfieren con las dependencias de las otras. Por ejemplo, m\u00faltiples servicios del sistema FASTAAPS requieren de una instalaci\u00f3n de Python y al aislarlos en sus propios contenedores es posible que cada servicio tenga su propia instalaci\u00f3n de Python, posiblemente con distintas versiones, librer\u00edas de c\u00f3digo instaladas y variables de entorno. Consistencia y Replicabilidad (replicablity) : Al definir expl\u00edcitamente las dependencias de una aplicaci\u00f3n, podemos garantizar que las aplicaciones funcionar\u00e1n de igual manera en cualquier entorno, sea este de desarrollo, de prueba o de producci\u00f3n. Facilidad de escalabilidad (scalability) : Al tener la posibilidad de crear y replicar aplicaciones contenerizadas facilmente, es posible incrementar o reducir el n\u00famero de copias de un servicio y sus recursos de c\u00f3mputo de acuerdo a los requerimientos de uso. Una desventaja del uso de contenedores es la complejidad de interconexi\u00f3n y monitoreo de servicios. Por suerte, existen tecnolog\u00edas maduras de manejo y orquestraci\u00f3n de servicios contenerizados como Kubernetes . 2. Im\u00e1genes Base, Servicios y Contenedores Docker del Sistema FASTAAPS \u00b6 Un contenedor es un proceso aislado creado a partir de una im\u00e1gen base que describe todas sus dependencias y su proceso de instalaci\u00f3n. Estas im\u00e1genes nos dan la capacidad de crear servicios de manera reproducible y predecible, independientemente de las caracter\u00edsticas particulares de la m\u00e1quina. Las im\u00e1genes base de los contenedores adem\u00e1s sirven de documentaci\u00f3n t\u00e9cnica. A continuaci\u00f3n listamos las im\u00e1genes base usadas para los distintos servicios del sistema FASTAAPS. Algunas im\u00e1genes descargadas del repositorio oficial de im\u00e1genes Docker, mientras otras son construidas en base a modificaciones de estas im\u00e1genes base. C\u00f3digo de Im\u00e1gen Componente Servicio Im\u00e1gen Base Tecnolog\u00eda Utilizada celery AAPS-DATA Servicio de Sincronizaci\u00f3n python:3.8.0 Celery/Flower rabbitmq:3.8.1-management AAPS-DATA Servicio de Sincronizaci\u00f3n - RabbitMQ edoburu/pgbouncer AAPS-DATA Servicio de Sincronizaci\u00f3n - PgBouncer Sobre estas im\u00e1genes base se implementan distintos servicios Docker. Cada servicio corre en un proceso aislado. Nombre del Servicio Im\u00e1gen Base Descripci\u00f3n Tecnolog\u00eda Utilizada rabbitmq rabbitmq:3.8.1-management Agente de mensajer\u00eda (message broker) RabbitMQ celery celery Proceso trabajador de Celery Celery flower celery Herramienta de monitorero de Celery Flower beat celery Herramienta de tareas peri\u00f3dicas Celery pgbouncer edoburu/pgbouncer Gestor de Conexiones para PostgreSQL PgBouncer Los contenedores Docker se comunican entre ellos y con sistemas externos exponiendo los siguientes puertos espec\u00edficos en el servidor. Puerto Protocolo Servicio Docker Descripci\u00f3n 5672 AMQP rabbitmq Puerto de Mensajer\u00eda 15672 HTTP rabbitmq Panel de Control de RabbitMQ 5555 HTTP celery_flower Panel de Control de Celery 6432 postgresql pgbouncer Gestor de Conexiones hacia PostgreSQL 3. Variables de Configuraci\u00f3n \u00b6 Las variables de configuraci\u00f3n de una aplicaci\u00f3n de software son aquellos datos que son independientes del funcionamiento de la aplicaci\u00f3n, como las URLs de las bases de datos o las llaves de acceso. Estos datos deben ser accesibles para los administradores y por lo general son del tipo din\u00e1mico. Adem\u00e1s, por seguridad, estos datos no pueden ser inclu\u00eddos en los repositorios p\u00fablicos de c\u00f3digo. De acuerdo a los 12 factores de aplicaciones como servicio , es deseable separar los datos de configuraci\u00f3n del c\u00f3digo fuente. La manera recomendada de administrar las variables de configuraci\u00f3n es a trav\u00e9s de variables de ambiente (environment variables). Esto garantiza la portabilidad y escalabilidad de la aplicaci\u00f3n. Las variables de ambiente tienen la ventaja de poder ser intercambiadas f\u00e1cilmente entre distintos ambientes de trabajo, son independientes del lenguaje de programaci\u00f3n y se integran muy bien con Docker. Los 12 factores de aplicaciones como servicio Los 12 factores de aplicaciones como servicio son reglas generales para el desarrollo de software basado en una arquitectura de servicios que garantiza la portabilidad y la escalabilidad de los servicios. El sistema FastAAPS se adhiere a varios de estos factores de calidad de c\u00f3digo. Para m\u00e1s informaci\u00f3n, v\u00e9ase la secci\u00f3n calidad de c\u00f3digo . Archivos Docker de los Servicios \u00b6 El archivo de Docker (en ingl\u00e9s Dockerfile ) contiene todas las instrucciones necesarias para construir la im\u00e1gen del contenedor y a su vez sirve de documentaci\u00f3n t\u00e9cnica. Estos archivos describen la aplicaci\u00f3n y sus dependencias. Docker ejecuta las instrucciones de un archivo Docker para contruir la im\u00e1gen base. A continuaci\u00f3n inclu\u00edmos los archivos docker que construyen las im\u00e1genes base usadas por los servicios del sistema.","title":"(Docker) Contenerizaci\u00f3n de Servicios"},{"location":"FASTAAPS/docker/#docker_tecnologias_de_contenerizacion","text":"","title":"Docker: Tecnolog\u00edas de Contenerizaci\u00f3n"},{"location":"FASTAAPS/docker/#1_informacion_general_que_es_y_para_que_sirve_docker","text":"Docker es una plataforma que permite a los desarrolladores empaquetar y correr aplicaciones v\u00eda interfaces estandarizadas. Docker est\u00e1 basado en tecnolog\u00edas de virtualizaci\u00f3n a nivel de sistema operativo que empaqueta software en sus propios entornos virtuales denominados contenedores . A diferencia de una m\u00e1quina virtual , un contenedor es m\u00e1s eficiente y ligero porque no replica una m\u00e1quina f\u00edsica abstracta, sino que simplemente replica un sistema operativo abstracto. De esta manera se puede correr muchos m\u00e1s contenedores en un mismo servidor que maquinas virtuales gozando de las ventajas de aislar cada aplicaci\u00f3n en su entorno individual. El uso de contenedores Docker para la puesta en producci\u00f3n reduce el trabajo de instalaci\u00f3n y el uso de scripts de instalaci\u00f3n. Un contenedor Docker es un proceso aislado que corre en el entorno del usuario del sistema operativo y comparte el n\u00facleo (kernel) del sistema con otros procesos. M\u00faltiples contenedores pueden correr en la misma m\u00e1quina, cada uno corriendo su aplicaci\u00f3n en un proceso aislado. La ventaja de utilizar tecnolog\u00edas de contenerizaci\u00f3n para los servicios en producci\u00f3n son: Bajo \u00edndice de acoplamiento (loose coupling) : Al aislar cada aplicaci\u00f3n en su propio entorno virtual, estas son independientes las unas de las otras. Las dependencias de una no interfieren con las dependencias de las otras. Por ejemplo, m\u00faltiples servicios del sistema FASTAAPS requieren de una instalaci\u00f3n de Python y al aislarlos en sus propios contenedores es posible que cada servicio tenga su propia instalaci\u00f3n de Python, posiblemente con distintas versiones, librer\u00edas de c\u00f3digo instaladas y variables de entorno. Consistencia y Replicabilidad (replicablity) : Al definir expl\u00edcitamente las dependencias de una aplicaci\u00f3n, podemos garantizar que las aplicaciones funcionar\u00e1n de igual manera en cualquier entorno, sea este de desarrollo, de prueba o de producci\u00f3n. Facilidad de escalabilidad (scalability) : Al tener la posibilidad de crear y replicar aplicaciones contenerizadas facilmente, es posible incrementar o reducir el n\u00famero de copias de un servicio y sus recursos de c\u00f3mputo de acuerdo a los requerimientos de uso. Una desventaja del uso de contenedores es la complejidad de interconexi\u00f3n y monitoreo de servicios. Por suerte, existen tecnolog\u00edas maduras de manejo y orquestraci\u00f3n de servicios contenerizados como Kubernetes .","title":"1. Informaci\u00f3n General: \u00bfQu\u00e9 es y para qu\u00e9 sirve Docker?"},{"location":"FASTAAPS/docker/#2_imagenes_base_servicios_y_contenedores_docker_del_sistema_fastaaps","text":"Un contenedor es un proceso aislado creado a partir de una im\u00e1gen base que describe todas sus dependencias y su proceso de instalaci\u00f3n. Estas im\u00e1genes nos dan la capacidad de crear servicios de manera reproducible y predecible, independientemente de las caracter\u00edsticas particulares de la m\u00e1quina. Las im\u00e1genes base de los contenedores adem\u00e1s sirven de documentaci\u00f3n t\u00e9cnica. A continuaci\u00f3n listamos las im\u00e1genes base usadas para los distintos servicios del sistema FASTAAPS. Algunas im\u00e1genes descargadas del repositorio oficial de im\u00e1genes Docker, mientras otras son construidas en base a modificaciones de estas im\u00e1genes base. C\u00f3digo de Im\u00e1gen Componente Servicio Im\u00e1gen Base Tecnolog\u00eda Utilizada celery AAPS-DATA Servicio de Sincronizaci\u00f3n python:3.8.0 Celery/Flower rabbitmq:3.8.1-management AAPS-DATA Servicio de Sincronizaci\u00f3n - RabbitMQ edoburu/pgbouncer AAPS-DATA Servicio de Sincronizaci\u00f3n - PgBouncer Sobre estas im\u00e1genes base se implementan distintos servicios Docker. Cada servicio corre en un proceso aislado. Nombre del Servicio Im\u00e1gen Base Descripci\u00f3n Tecnolog\u00eda Utilizada rabbitmq rabbitmq:3.8.1-management Agente de mensajer\u00eda (message broker) RabbitMQ celery celery Proceso trabajador de Celery Celery flower celery Herramienta de monitorero de Celery Flower beat celery Herramienta de tareas peri\u00f3dicas Celery pgbouncer edoburu/pgbouncer Gestor de Conexiones para PostgreSQL PgBouncer Los contenedores Docker se comunican entre ellos y con sistemas externos exponiendo los siguientes puertos espec\u00edficos en el servidor. Puerto Protocolo Servicio Docker Descripci\u00f3n 5672 AMQP rabbitmq Puerto de Mensajer\u00eda 15672 HTTP rabbitmq Panel de Control de RabbitMQ 5555 HTTP celery_flower Panel de Control de Celery 6432 postgresql pgbouncer Gestor de Conexiones hacia PostgreSQL","title":"2. Im\u00e1genes Base, Servicios y Contenedores Docker del Sistema FASTAAPS"},{"location":"FASTAAPS/docker/#3_variables_de_configuracion","text":"Las variables de configuraci\u00f3n de una aplicaci\u00f3n de software son aquellos datos que son independientes del funcionamiento de la aplicaci\u00f3n, como las URLs de las bases de datos o las llaves de acceso. Estos datos deben ser accesibles para los administradores y por lo general son del tipo din\u00e1mico. Adem\u00e1s, por seguridad, estos datos no pueden ser inclu\u00eddos en los repositorios p\u00fablicos de c\u00f3digo. De acuerdo a los 12 factores de aplicaciones como servicio , es deseable separar los datos de configuraci\u00f3n del c\u00f3digo fuente. La manera recomendada de administrar las variables de configuraci\u00f3n es a trav\u00e9s de variables de ambiente (environment variables). Esto garantiza la portabilidad y escalabilidad de la aplicaci\u00f3n. Las variables de ambiente tienen la ventaja de poder ser intercambiadas f\u00e1cilmente entre distintos ambientes de trabajo, son independientes del lenguaje de programaci\u00f3n y se integran muy bien con Docker. Los 12 factores de aplicaciones como servicio Los 12 factores de aplicaciones como servicio son reglas generales para el desarrollo de software basado en una arquitectura de servicios que garantiza la portabilidad y la escalabilidad de los servicios. El sistema FastAAPS se adhiere a varios de estos factores de calidad de c\u00f3digo. Para m\u00e1s informaci\u00f3n, v\u00e9ase la secci\u00f3n calidad de c\u00f3digo .","title":"3. Variables de Configuraci\u00f3n"},{"location":"FASTAAPS/docker/#archivos_docker_de_los_servicios","text":"El archivo de Docker (en ingl\u00e9s Dockerfile ) contiene todas las instrucciones necesarias para construir la im\u00e1gen del contenedor y a su vez sirve de documentaci\u00f3n t\u00e9cnica. Estos archivos describen la aplicaci\u00f3n y sus dependencias. Docker ejecuta las instrucciones de un archivo Docker para contruir la im\u00e1gen base. A continuaci\u00f3n inclu\u00edmos los archivos docker que construyen las im\u00e1genes base usadas por los servicios del sistema.","title":"Archivos Docker de los Servicios"},{"location":"FASTAAPS/quality/","text":"Est\u00e1ndares de Calidad de C\u00f3digo \u00b6 Calidad \"Calidad significa hacer las cosas bien, a\u00fan cuando nadie est\u00e9 mirando.\" .- Henry Ford El sistema FASTAAPS tiene una arquitectura orientada a servicios y se adhiere a los 12 factores de aplicaciones como servicio . Estos factores son principios de dise\u00f1o que buscan las siguientes propiedades deseables para un sistema: Minimizaci\u00f3n de costos y esfuerzos para administradores y nuevos desarrolladores. M\u00e1xima portabilidad entre ambientes de trabajo. Adecuado para el uso de tecnolog\u00edas cloud. Adecuado para los paradigmas de integraci\u00f3n cont\u00ednua y desarrollo \u00e1gil . Es f\u00e1cilmente escalable sin necesitar cambios dr\u00e1sticos de estructura. A continuaci\u00f3n describimos brevemente los factores, las ventajas de seguir estas gu\u00edas de dise\u00f1o y c\u00f3mo se tomaron en consideraci\u00f3n los factores durante el desarrollo e implementaci\u00f3n del sistema FASTAAPS. Factor 1: Un solo Repositorio de C\u00f3digo Fuente Versionado \u00b6 La aplicaci\u00f3n utiliza un sistema de control de versi\u00f3n como Git o Mercurial y todo el c\u00f3digo fuente de la aplicaci\u00f3n es almacenado en un solo repositorio. Ventajas de usar un sistema de control de veri\u00f3n: Colaboraci\u00f3n : Permite a\u00f1adir contribuciones de m\u00faltiples desarrolladores. Versatilidad : Permite mantener distintas versiones del c\u00f3digo para distintas entornos de trabajo (desarrollo, prueba, producci\u00f3n). Accesibilidad : Hace al c\u00f3digo fuente m\u00e1s accesible al equipo. La accesibilidad del c\u00f3digo es fundamental para ser considerado c\u00f3digo abierto . Automatizaci\u00f3n : Las plataformas de maenjo de c\u00f3digo modernas como Github adem\u00e1s se integran bien con herramientas de integraci\u00f3n cont\u00ednua. Ventajas de usar un repositorio \u00fanico: Facilidad de Uso y Reuso del c\u00f3digo fuente. Simplicidad de la estructura del proyecto. Todo el c\u00f3digo del sistema FASTAAPS es almacenado en un respositorio de Github: https://github.com/sergio-chumacero/fastaaps/ La estructura del c\u00f3digo es detallada en la secci\u00f3n estructura del c\u00f3digo fuente . Factor 2: Aislamiento y Declaraci\u00f3n Expl\u00edcita de Dependencias \u00b6 La aplicaci\u00f3n declara las dependencias de sus componentes de manera expl\u00edcita y aislada. Ventajas del aislamiento de dependencias: Bajo \u00edndice de acoplamiento entre componentes: Al tener sus dependencias aisladas, los componentes no interfieren de manera negativa unos con otros. Especializaci\u00f3n de los componentes: Como consecuencia del bajo \u00edndice de acoplamiento, cada componente puede usar tecnolog\u00edas especializadas para sus funciones, a diferencia de usar una herramienta general no optimizada para todas sus funciones. Ventajas de la declaraci\u00f3n expl\u00edcita de dependencias: Consistencia : Al no depender de dependencias impl\u00edcitas, los servicios garantizan sus funcionamientos en diversos entornos de trabajo sin correr el riesgo de que una de sus dependencias no sea cumplida. Documentaci\u00f3n : Adem\u00e1s de ser usados para la construcci\u00f3n de los componentes, los archivos de declaraci\u00f3n de dependencias sirven de documentaci\u00f3n confiable. Replicabilidad : Con las dependencias expl\u00edcitamente declaradas, un desarrollador puede replicar f\u00e1cilmente el ambiente de desarrollo de la aplicaci\u00f3n. El uso de contenedores Docker en la implementaci\u00f3n de los servicios del sistema garantiza el aislamiento de dependencias en el sistema FASTAAPS. Los documentos que definen de manera expl\u00edcita las dependencias de cada servicio son los archivos Docker utilizados para la construcci\u00f3n de las im\u00e1genes base. Otros documentos usados con este fin son los documentos de dependencias de Python requirements.txt usados por el gestor de paquetes pip . Los m\u00e9todos de contenerizaci\u00f3n son descritos en detalle en la secci\u00f3n de contenerizaci\u00f3n . Factor 3: Configuraci\u00f3n Guardada en Variables de Ambiente \u00b6 La configuraci\u00f3n de la aplicaci\u00f3n es guardada en variables de ambiente y no en el c\u00f3digo fuente. La configuraci\u00f3n de una aplicaci\u00f3n es todo aquello que vaya a cambiar entre distintos entornos de trabajo. Ejemplos de configuraci\u00f3n son credenciales, detalles de acceso a servicios externos (como bases de datos), direcciones IP y URLs entre otras. Ventajas: Consistencia del c\u00f3digo fuente: Al separar estr\u00edctamente la configuraci\u00f3n del c\u00f3digo fuente, el c\u00f3digo fuente requiere de menos modificaciones para funcionar en distintos entornos de trabajo. Colaboraci\u00f3n : Al no guardar credenciales en el c\u00f3digo este puede ser publicado sin comprometer la seguridad del sistema. Esta propiedad es fundamental para poder publicar el c\u00f3digo fuente como c\u00f3digo abierto . Facilidad de uso : Las variables de ambiente pueden ser modificadas con facilidad. Un administrador o desarrollador externo que deba cambiar la configuraci\u00f3n de la aplciaci\u00f3n no deber\u00eda tener que modificar el c\u00f3digo fuente. En el sistema FASTAAPS la configuraci\u00f3n usada por los componentes es guardada en variables de ambiente en los contenedores Docker. Para facilitar la modificaci\u00f3n de estas variables de configuraci\u00f3n, las variables son agrupadas en archivos del tipo .env . Factor 4: Servicios de Apoyo como Recursos Adjuntos \u00b6 La aplicaci\u00f3n no hace distinci\u00f3n entre servicios de apoyo externos e internos Un servicio de apoyo es cualquier servicio que la aplicaci\u00f3n requira para su funcionamiento normal, por ejemplo bases de datos, agentes de mensajer\u00eda o servicios de mail. Los servicios de apoyo pueden ser externos (por ejemplo servicios cloud) o internos, es decir manejados por el mismo sistema (por ejemplo la base de datos del sistema). Ventajas: Facilidad de uso : Al no diferenciar entre servicios externos e internos, se elimina la complejidad de identificar ambos grupos y verificar su funcionamiento. Flexibilidad : Al no especificar los detalles de los servicios en el c\u00f3digo de la aplicaci\u00f3n es posible intercambiar y extender los servicios de apoyo con mayor flexibilidad. Los recursos de apoyo del sistema FASTAAPS son por ejemplo el agente de mesarjer\u00eda RabbitMQ utilizado por el servicio de sincronizaci\u00f3n o la base de datos MongoDB de la base de datos especializada . El c\u00f3digo de los componentes que hacen uso de estos servicios s\u00f3lo requieren de credenciales y detalles de conex\u00edon. Factor 5: Separaci\u00f3n entre Construcci\u00f3n y Ejecuci\u00f3n \u00b6 Los procesos de construcci\u00f3n y ejecuci\u00f3n de la aplici\u00f3n est\u00e1n fuertemente separados. El proceso de construcci\u00f3n de la aplicaci\u00f3n consiste en transformar el c\u00f3digo fuente y la configuraci\u00f3n de la aplicaci\u00f3n en un archivo ejecutable, mientras que el proceso de ejecuci\u00f3n consiste en correr este archivo en el ambiente de producci\u00f3n. Ventajas: Consistencia : Al separar estos dos procesos, la modificaci\u00f3n del c\u00f3digo fuente no afecta la ejecuci\u00f3n de la aplicaci\u00f3n y la aplicaci\u00f3n no es capaz de modificar el c\u00f3digo fuente. Seguridad : Si el c\u00f3digo se encuentra con control de veriones, es posible volver, en caso de emergencia a una versi\u00f3n previa de la aplicaci\u00f3n recreando el archivo ejecutable de una versi\u00f3n anterior. Colaboraci\u00f3n : La seguridad del punto anterior facilita la colaboraci\u00f3n de m\u00faltiples desarrolladores. Los contenedores Docker usados por el sistema FASTAAPS son versiones ejecutables creadas en base a im\u00e1genes base que incluye el c\u00f3digo fuente de la aplicaci\u00f3n. Los m\u00e9todos de contenerizaci\u00f3n son descritos en detalle en la secci\u00f3n de contenerizaci\u00f3n . Factor 6: Procesos Independientes y Libres de Estado \u00b6 La aplicaci\u00f3n es ejecutada como uno o m\u00e1s procesos libres de estado (stateless) que no comparten recursos entre ellos. Un proceso libre de estado es aquel cuya funcionalidad no depende del estado interno en el que se encuentre en un momento espec\u00edfico. Esto garantiza que el proceso funcionar\u00e1 de igual manera en cualquier momento. Ventajas: Consistencia : Al garantizar que la l\u00f3gica de la aplicaci\u00f3n no dependa de lo que esta hizo previamente, podemos garantizar la consistencia de la aplicaci\u00f3n en el tiempo. Bajo \u00edndice de acoplamiento : Ya que los procesos de la aplicaci\u00f3n no comparten recursos entre ellos, se eliminan dependencias innecesarias. Escalabilidad horizontal: Con m\u00faltiples instancias de la aplicaci\u00f3n corriendo en paralelo, si estos mantuvieran estado de manera interna, ser\u00eda muy complicado orquestrar la interacci\u00f3n entre ellos. Los procesos del sistema FASTAAPS no guardan datos de sesiones o memoria de transacciones, todo el estado persistente es relegado a servicios de apoyo como bases de datos o agentes de mensajer\u00eda. La interacci\u00f3n entre los procesos del sistema es realizada a trav\u00e9s de protocolos de comunicaci\u00f3n definidos de manera expl\u00edcita y ofrecidos como servicio, por ejemplo el servicio de sincronizaci\u00f3n utiliza el servicio REST-API para ingresar datos al sistema. Factor 7: Exportaci\u00f3n de Servicios v\u00eda Enlaces de Puertos \u00b6 La aplicaci\u00f3n expone sus servicios a trav\u00e9s de puertos de acceso espec\u00edficos. Entre otras cosas, esto significa que la aplicaci\u00f3n no depende de un servidor web adicional para ofrecer sus servicios. Ventajas: Portabilidad : Al eliminar dependencias de conectividad, la aplicaci\u00f3n puede ser considerada como un paquete \"completo\" que puede ser instalado f\u00e1cilmente en cualquier ambiente. Interconexi\u00f3n : Al contar con protocolos de conexi\u00f3n bien definidos, resulta m\u00e1s factible hacer uso de estos canales para conectar distintos servicios, en especial si existen m\u00faltiples instancias de la aplicaci\u00f3n. Los contenedores Docker utilizados por el sistema FASTAAPS exponen puertos espec\u00edficos, definidos de manera expl\u00edcita en los archivos de creaci\u00f3n de im\u00e1genes base. La interacci\u00f3n entre componentes utiliza estos canales de comunicaci\u00f3n. Por ejemplo, el servicio de sincronizaci\u00f3n de datos utiliza el puerto expuesto por el servicio REST-API para alimentar datos al sistema y por lo tanto se adhiere a los protocolos de acceso definidos por este servicio. Los puertos expuestos por los distintos contenedores es detallado en la secci\u00f3n Tecnolog\u00edas de Contenerizaci\u00f3n . Factor 8: Procesos como Modelo de Concurrencia \u00b6 La aplicaci\u00f3n utiliza procesos computacionales como mecanismo fundamental para la extensi\u00f3n de sus servicios. Durante su ciclo de vida, es com\u00fan que la aplicaci\u00f3n reciba cargas de trabajo diversas, por ejemplo un fin de semana, se espera que el n\u00famero de pedidos a la aplicaci\u00f3n sea menor que en horas de trabajo. Este factor instruye que la manera de afrontar esta situaci\u00f3n es a trav\u00e9s de procesos computacionales concurrentes. De acuerdo al factor n\u00famero seis, los procesos computacionales son aislados y libres de estado. Este punto es importante para evitar problemas de consistencia y complejidad al tener que manejar m\u00faltiples procesos paralelos de manera simult\u00e1nea. Ventajas: Escalabilidad : La arquitectura basada en procesos computacionales permite a la aplicaci\u00f3n manejar cargas de trabajo diversas de manera eficiente, iniciando y terminando procesos de acuerdo al uso de sus componentes. Eficiencia : Responder a altas cargas de trabajo incrementando el n\u00famero de procesos de cierto tipo (escalabilidad horizontal), tiende ser m\u00e1s econ\u00f3mico en t\u00e9rminos de recursos computacionales que incrementar la capacidad de los servidores (escalabilidad vertical), ademas de adaptarse m\u00e1s facilmente a sistemas distribuidos. El uso de contenedores Docker encapsula los servicios del sistema FASTAAPS en procesos aislados. Adem\u00e1s, el uso de tecnolog\u00edas de orquestaci\u00f3n de contenedores permite que el sistema se adapte a distintas cargas de trabajo. Factor 9: Facilidad y Rapidez de Puesta en Marcha y Cierre \u00b6 La aplicaci\u00f3n puede ser iniciada y apagada con facilidad y de manera r\u00e1pida. Ventajas: Robustez : La facilidad de manejo incentiva las mejoras constantes y cambios de configuraci\u00f3n en producci\u00f3n. Escalabilidad : La rapidez de inicio y cierre de la aplicaci\u00f3n es importante para la adaptaci\u00f3n din\u00e1mica de la aplicaci\u00f3n. El sistema FASTAAPS utiliza herramientas de orquestraci\u00f3n de contenedores como docker-compose para facilitar y agilizar los procesos de inicio y cierre de aplicaciones. Estos procesos no tardan m\u00e1s de unos segundos desde que el comando inicial es ejecutado. Factor 10: Entornos de Trabajo Similares \u00b6 Los entornos de trabajo (desarrollo, prueba y producci\u00f3n) de la aplicaci\u00f3n deben ser lo m\u00e1s similares posibles. Ventajas: Robustez/Consistencia : Si los entornos de trabajo son similares, se reducen las probabilidades de fallas inesperadas que tengan como causa factores externos a la aplicaci\u00f3n. Integraci\u00f3n Cont\u00ednua : Al mantener la brecha entre desarrollo y producci\u00f3n peque\u00f1a, se posibilita la automatizaci\u00f3n de la puesta en producci\u00f3n. Al abstraer el entorno de trabajo a nivel sistema operativo usando contenedores, garantizamos que los ambientes de trabajo sean lo m\u00e1s similares posibles. De igual manera, las herramientas y servicios de apoyo utilizados durante el desarrollo del sistema FASTAAPS son los mismos que los que son utilizados en producci\u00f3n. Factor 11: Archivos de Registro como un Flujo de Eventos \u00b6 La aplicaci\u00f3n permite monitorear sus servicios a trav\u00e9s de un flujo de eventos en tiempo real (event stream). Este flujo de eventos ser\u00e1 redirigido posteriormente a archivos para ser archivado. Ventajas: Portabilidad : Como la aplicaci\u00f3n no administra los archivos de registro de sus servicios individualmente, la aplicaci\u00f3n y sus registros pueden ser manejados con mayor faicilidad. Facilidad de Uso : Tener todos los eventos de la aplicaci\u00f3n en un s\u00f3lo lugar, facilita el trabajo de monitoreo de la aplicaci\u00f3n. Todos los eventos de los servicios del sistema FASTAAPS son unificados en un flujo de eventos que son almacenados peri\u00f3dicamente en archivos persistentes. Factor 12: Tareas Administrativas como Procesos de Vida Corta Inclu\u00eddos en la Distribuci\u00f3n de C\u00f3digo \u00b6 La aplicaci\u00f3n permite realizar tareas administrativas creando procesos de vida corta en un entorno similar/id\u00e9ntico al entorno de la aplicaci\u00f3n. Estas tareas administrativas deben ser inclu\u00eddas en la distribuci\u00f3n de c\u00f3digo de la aplicaci\u00f3n. Ejemplos de tareas administrativas son: Migraciones de bases de datos, limpieza/actualizaci\u00f3n de datos, administraci\u00f3n de usuarios y credenciales. Ventajas: Consistencia : Al utilizar un ambiente similar/id\u00e9ntico al de la aplicaci\u00f3n para ejecutar tareas administrativas, se minimiza el riesgo de errores con causa ajena a la implementaci\u00f3n de estas tareas. Seguridad : Las tareas administrativas pueden ser riesgosas para la aplicaci\u00f3n por lo que es mejor usar herramientas que los desarrolladores hayan puesto a prueba. Facilidad de Uso : Al inclu\u00edr las tareas en la distribuci\u00f3n de c\u00f3digo, no es necesario importarlas desde un entorno distinto y el equipo de desarrollo garantiza que estas tareas se encuentren actualizadas y que funcionen apropiadamente. Las tareas admnistrativas del sistema FASTAAPS son inclu\u00eddas en el repositorio de c\u00f3digo fuente y son ejecutadas dentro del contenedor correspondiente a la tarea en cuesti\u00f3n.","title":"Est\u00e1ndares de Calidad de C\u00f3digo"},{"location":"FASTAAPS/quality/#estandares_de_calidad_de_codigo","text":"Calidad \"Calidad significa hacer las cosas bien, a\u00fan cuando nadie est\u00e9 mirando.\" .- Henry Ford El sistema FASTAAPS tiene una arquitectura orientada a servicios y se adhiere a los 12 factores de aplicaciones como servicio . Estos factores son principios de dise\u00f1o que buscan las siguientes propiedades deseables para un sistema: Minimizaci\u00f3n de costos y esfuerzos para administradores y nuevos desarrolladores. M\u00e1xima portabilidad entre ambientes de trabajo. Adecuado para el uso de tecnolog\u00edas cloud. Adecuado para los paradigmas de integraci\u00f3n cont\u00ednua y desarrollo \u00e1gil . Es f\u00e1cilmente escalable sin necesitar cambios dr\u00e1sticos de estructura. A continuaci\u00f3n describimos brevemente los factores, las ventajas de seguir estas gu\u00edas de dise\u00f1o y c\u00f3mo se tomaron en consideraci\u00f3n los factores durante el desarrollo e implementaci\u00f3n del sistema FASTAAPS.","title":"Est\u00e1ndares de Calidad de C\u00f3digo"},{"location":"FASTAAPS/quality/#factor_1_un_solo_repositorio_de_codigo_fuente_versionado","text":"La aplicaci\u00f3n utiliza un sistema de control de versi\u00f3n como Git o Mercurial y todo el c\u00f3digo fuente de la aplicaci\u00f3n es almacenado en un solo repositorio. Ventajas de usar un sistema de control de veri\u00f3n: Colaboraci\u00f3n : Permite a\u00f1adir contribuciones de m\u00faltiples desarrolladores. Versatilidad : Permite mantener distintas versiones del c\u00f3digo para distintas entornos de trabajo (desarrollo, prueba, producci\u00f3n). Accesibilidad : Hace al c\u00f3digo fuente m\u00e1s accesible al equipo. La accesibilidad del c\u00f3digo es fundamental para ser considerado c\u00f3digo abierto . Automatizaci\u00f3n : Las plataformas de maenjo de c\u00f3digo modernas como Github adem\u00e1s se integran bien con herramientas de integraci\u00f3n cont\u00ednua. Ventajas de usar un repositorio \u00fanico: Facilidad de Uso y Reuso del c\u00f3digo fuente. Simplicidad de la estructura del proyecto. Todo el c\u00f3digo del sistema FASTAAPS es almacenado en un respositorio de Github: https://github.com/sergio-chumacero/fastaaps/ La estructura del c\u00f3digo es detallada en la secci\u00f3n estructura del c\u00f3digo fuente .","title":"Factor 1: Un solo Repositorio de C\u00f3digo Fuente Versionado"},{"location":"FASTAAPS/quality/#factor_2_aislamiento_y_declaracion_explicita_de_dependencias","text":"La aplicaci\u00f3n declara las dependencias de sus componentes de manera expl\u00edcita y aislada. Ventajas del aislamiento de dependencias: Bajo \u00edndice de acoplamiento entre componentes: Al tener sus dependencias aisladas, los componentes no interfieren de manera negativa unos con otros. Especializaci\u00f3n de los componentes: Como consecuencia del bajo \u00edndice de acoplamiento, cada componente puede usar tecnolog\u00edas especializadas para sus funciones, a diferencia de usar una herramienta general no optimizada para todas sus funciones. Ventajas de la declaraci\u00f3n expl\u00edcita de dependencias: Consistencia : Al no depender de dependencias impl\u00edcitas, los servicios garantizan sus funcionamientos en diversos entornos de trabajo sin correr el riesgo de que una de sus dependencias no sea cumplida. Documentaci\u00f3n : Adem\u00e1s de ser usados para la construcci\u00f3n de los componentes, los archivos de declaraci\u00f3n de dependencias sirven de documentaci\u00f3n confiable. Replicabilidad : Con las dependencias expl\u00edcitamente declaradas, un desarrollador puede replicar f\u00e1cilmente el ambiente de desarrollo de la aplicaci\u00f3n. El uso de contenedores Docker en la implementaci\u00f3n de los servicios del sistema garantiza el aislamiento de dependencias en el sistema FASTAAPS. Los documentos que definen de manera expl\u00edcita las dependencias de cada servicio son los archivos Docker utilizados para la construcci\u00f3n de las im\u00e1genes base. Otros documentos usados con este fin son los documentos de dependencias de Python requirements.txt usados por el gestor de paquetes pip . Los m\u00e9todos de contenerizaci\u00f3n son descritos en detalle en la secci\u00f3n de contenerizaci\u00f3n .","title":"Factor 2: Aislamiento y Declaraci\u00f3n Expl\u00edcita de Dependencias"},{"location":"FASTAAPS/quality/#factor_3_configuracion_guardada_en_variables_de_ambiente","text":"La configuraci\u00f3n de la aplicaci\u00f3n es guardada en variables de ambiente y no en el c\u00f3digo fuente. La configuraci\u00f3n de una aplicaci\u00f3n es todo aquello que vaya a cambiar entre distintos entornos de trabajo. Ejemplos de configuraci\u00f3n son credenciales, detalles de acceso a servicios externos (como bases de datos), direcciones IP y URLs entre otras. Ventajas: Consistencia del c\u00f3digo fuente: Al separar estr\u00edctamente la configuraci\u00f3n del c\u00f3digo fuente, el c\u00f3digo fuente requiere de menos modificaciones para funcionar en distintos entornos de trabajo. Colaboraci\u00f3n : Al no guardar credenciales en el c\u00f3digo este puede ser publicado sin comprometer la seguridad del sistema. Esta propiedad es fundamental para poder publicar el c\u00f3digo fuente como c\u00f3digo abierto . Facilidad de uso : Las variables de ambiente pueden ser modificadas con facilidad. Un administrador o desarrollador externo que deba cambiar la configuraci\u00f3n de la aplciaci\u00f3n no deber\u00eda tener que modificar el c\u00f3digo fuente. En el sistema FASTAAPS la configuraci\u00f3n usada por los componentes es guardada en variables de ambiente en los contenedores Docker. Para facilitar la modificaci\u00f3n de estas variables de configuraci\u00f3n, las variables son agrupadas en archivos del tipo .env .","title":"Factor 3: Configuraci\u00f3n Guardada en Variables de Ambiente"},{"location":"FASTAAPS/quality/#factor_4_servicios_de_apoyo_como_recursos_adjuntos","text":"La aplicaci\u00f3n no hace distinci\u00f3n entre servicios de apoyo externos e internos Un servicio de apoyo es cualquier servicio que la aplicaci\u00f3n requira para su funcionamiento normal, por ejemplo bases de datos, agentes de mensajer\u00eda o servicios de mail. Los servicios de apoyo pueden ser externos (por ejemplo servicios cloud) o internos, es decir manejados por el mismo sistema (por ejemplo la base de datos del sistema). Ventajas: Facilidad de uso : Al no diferenciar entre servicios externos e internos, se elimina la complejidad de identificar ambos grupos y verificar su funcionamiento. Flexibilidad : Al no especificar los detalles de los servicios en el c\u00f3digo de la aplicaci\u00f3n es posible intercambiar y extender los servicios de apoyo con mayor flexibilidad. Los recursos de apoyo del sistema FASTAAPS son por ejemplo el agente de mesarjer\u00eda RabbitMQ utilizado por el servicio de sincronizaci\u00f3n o la base de datos MongoDB de la base de datos especializada . El c\u00f3digo de los componentes que hacen uso de estos servicios s\u00f3lo requieren de credenciales y detalles de conex\u00edon.","title":"Factor 4: Servicios de Apoyo como Recursos Adjuntos"},{"location":"FASTAAPS/quality/#factor_5_separacion_entre_construccion_y_ejecucion","text":"Los procesos de construcci\u00f3n y ejecuci\u00f3n de la aplici\u00f3n est\u00e1n fuertemente separados. El proceso de construcci\u00f3n de la aplicaci\u00f3n consiste en transformar el c\u00f3digo fuente y la configuraci\u00f3n de la aplicaci\u00f3n en un archivo ejecutable, mientras que el proceso de ejecuci\u00f3n consiste en correr este archivo en el ambiente de producci\u00f3n. Ventajas: Consistencia : Al separar estos dos procesos, la modificaci\u00f3n del c\u00f3digo fuente no afecta la ejecuci\u00f3n de la aplicaci\u00f3n y la aplicaci\u00f3n no es capaz de modificar el c\u00f3digo fuente. Seguridad : Si el c\u00f3digo se encuentra con control de veriones, es posible volver, en caso de emergencia a una versi\u00f3n previa de la aplicaci\u00f3n recreando el archivo ejecutable de una versi\u00f3n anterior. Colaboraci\u00f3n : La seguridad del punto anterior facilita la colaboraci\u00f3n de m\u00faltiples desarrolladores. Los contenedores Docker usados por el sistema FASTAAPS son versiones ejecutables creadas en base a im\u00e1genes base que incluye el c\u00f3digo fuente de la aplicaci\u00f3n. Los m\u00e9todos de contenerizaci\u00f3n son descritos en detalle en la secci\u00f3n de contenerizaci\u00f3n .","title":"Factor 5: Separaci\u00f3n entre Construcci\u00f3n y Ejecuci\u00f3n"},{"location":"FASTAAPS/quality/#factor_6_procesos_independientes_y_libres_de_estado","text":"La aplicaci\u00f3n es ejecutada como uno o m\u00e1s procesos libres de estado (stateless) que no comparten recursos entre ellos. Un proceso libre de estado es aquel cuya funcionalidad no depende del estado interno en el que se encuentre en un momento espec\u00edfico. Esto garantiza que el proceso funcionar\u00e1 de igual manera en cualquier momento. Ventajas: Consistencia : Al garantizar que la l\u00f3gica de la aplicaci\u00f3n no dependa de lo que esta hizo previamente, podemos garantizar la consistencia de la aplicaci\u00f3n en el tiempo. Bajo \u00edndice de acoplamiento : Ya que los procesos de la aplicaci\u00f3n no comparten recursos entre ellos, se eliminan dependencias innecesarias. Escalabilidad horizontal: Con m\u00faltiples instancias de la aplicaci\u00f3n corriendo en paralelo, si estos mantuvieran estado de manera interna, ser\u00eda muy complicado orquestrar la interacci\u00f3n entre ellos. Los procesos del sistema FASTAAPS no guardan datos de sesiones o memoria de transacciones, todo el estado persistente es relegado a servicios de apoyo como bases de datos o agentes de mensajer\u00eda. La interacci\u00f3n entre los procesos del sistema es realizada a trav\u00e9s de protocolos de comunicaci\u00f3n definidos de manera expl\u00edcita y ofrecidos como servicio, por ejemplo el servicio de sincronizaci\u00f3n utiliza el servicio REST-API para ingresar datos al sistema.","title":"Factor 6: Procesos Independientes y Libres de Estado"},{"location":"FASTAAPS/quality/#factor_7_exportacion_de_servicios_via_enlaces_de_puertos","text":"La aplicaci\u00f3n expone sus servicios a trav\u00e9s de puertos de acceso espec\u00edficos. Entre otras cosas, esto significa que la aplicaci\u00f3n no depende de un servidor web adicional para ofrecer sus servicios. Ventajas: Portabilidad : Al eliminar dependencias de conectividad, la aplicaci\u00f3n puede ser considerada como un paquete \"completo\" que puede ser instalado f\u00e1cilmente en cualquier ambiente. Interconexi\u00f3n : Al contar con protocolos de conexi\u00f3n bien definidos, resulta m\u00e1s factible hacer uso de estos canales para conectar distintos servicios, en especial si existen m\u00faltiples instancias de la aplicaci\u00f3n. Los contenedores Docker utilizados por el sistema FASTAAPS exponen puertos espec\u00edficos, definidos de manera expl\u00edcita en los archivos de creaci\u00f3n de im\u00e1genes base. La interacci\u00f3n entre componentes utiliza estos canales de comunicaci\u00f3n. Por ejemplo, el servicio de sincronizaci\u00f3n de datos utiliza el puerto expuesto por el servicio REST-API para alimentar datos al sistema y por lo tanto se adhiere a los protocolos de acceso definidos por este servicio. Los puertos expuestos por los distintos contenedores es detallado en la secci\u00f3n Tecnolog\u00edas de Contenerizaci\u00f3n .","title":"Factor 7: Exportaci\u00f3n de Servicios v\u00eda Enlaces de Puertos"},{"location":"FASTAAPS/quality/#factor_8_procesos_como_modelo_de_concurrencia","text":"La aplicaci\u00f3n utiliza procesos computacionales como mecanismo fundamental para la extensi\u00f3n de sus servicios. Durante su ciclo de vida, es com\u00fan que la aplicaci\u00f3n reciba cargas de trabajo diversas, por ejemplo un fin de semana, se espera que el n\u00famero de pedidos a la aplicaci\u00f3n sea menor que en horas de trabajo. Este factor instruye que la manera de afrontar esta situaci\u00f3n es a trav\u00e9s de procesos computacionales concurrentes. De acuerdo al factor n\u00famero seis, los procesos computacionales son aislados y libres de estado. Este punto es importante para evitar problemas de consistencia y complejidad al tener que manejar m\u00faltiples procesos paralelos de manera simult\u00e1nea. Ventajas: Escalabilidad : La arquitectura basada en procesos computacionales permite a la aplicaci\u00f3n manejar cargas de trabajo diversas de manera eficiente, iniciando y terminando procesos de acuerdo al uso de sus componentes. Eficiencia : Responder a altas cargas de trabajo incrementando el n\u00famero de procesos de cierto tipo (escalabilidad horizontal), tiende ser m\u00e1s econ\u00f3mico en t\u00e9rminos de recursos computacionales que incrementar la capacidad de los servidores (escalabilidad vertical), ademas de adaptarse m\u00e1s facilmente a sistemas distribuidos. El uso de contenedores Docker encapsula los servicios del sistema FASTAAPS en procesos aislados. Adem\u00e1s, el uso de tecnolog\u00edas de orquestaci\u00f3n de contenedores permite que el sistema se adapte a distintas cargas de trabajo.","title":"Factor 8: Procesos como Modelo de Concurrencia"},{"location":"FASTAAPS/quality/#factor_9_facilidad_y_rapidez_de_puesta_en_marcha_y_cierre","text":"La aplicaci\u00f3n puede ser iniciada y apagada con facilidad y de manera r\u00e1pida. Ventajas: Robustez : La facilidad de manejo incentiva las mejoras constantes y cambios de configuraci\u00f3n en producci\u00f3n. Escalabilidad : La rapidez de inicio y cierre de la aplicaci\u00f3n es importante para la adaptaci\u00f3n din\u00e1mica de la aplicaci\u00f3n. El sistema FASTAAPS utiliza herramientas de orquestraci\u00f3n de contenedores como docker-compose para facilitar y agilizar los procesos de inicio y cierre de aplicaciones. Estos procesos no tardan m\u00e1s de unos segundos desde que el comando inicial es ejecutado.","title":"Factor 9: Facilidad y Rapidez de Puesta en Marcha y Cierre"},{"location":"FASTAAPS/quality/#factor_10_entornos_de_trabajo_similares","text":"Los entornos de trabajo (desarrollo, prueba y producci\u00f3n) de la aplicaci\u00f3n deben ser lo m\u00e1s similares posibles. Ventajas: Robustez/Consistencia : Si los entornos de trabajo son similares, se reducen las probabilidades de fallas inesperadas que tengan como causa factores externos a la aplicaci\u00f3n. Integraci\u00f3n Cont\u00ednua : Al mantener la brecha entre desarrollo y producci\u00f3n peque\u00f1a, se posibilita la automatizaci\u00f3n de la puesta en producci\u00f3n. Al abstraer el entorno de trabajo a nivel sistema operativo usando contenedores, garantizamos que los ambientes de trabajo sean lo m\u00e1s similares posibles. De igual manera, las herramientas y servicios de apoyo utilizados durante el desarrollo del sistema FASTAAPS son los mismos que los que son utilizados en producci\u00f3n.","title":"Factor 10: Entornos de Trabajo Similares"},{"location":"FASTAAPS/quality/#factor_11_archivos_de_registro_como_un_flujo_de_eventos","text":"La aplicaci\u00f3n permite monitorear sus servicios a trav\u00e9s de un flujo de eventos en tiempo real (event stream). Este flujo de eventos ser\u00e1 redirigido posteriormente a archivos para ser archivado. Ventajas: Portabilidad : Como la aplicaci\u00f3n no administra los archivos de registro de sus servicios individualmente, la aplicaci\u00f3n y sus registros pueden ser manejados con mayor faicilidad. Facilidad de Uso : Tener todos los eventos de la aplicaci\u00f3n en un s\u00f3lo lugar, facilita el trabajo de monitoreo de la aplicaci\u00f3n. Todos los eventos de los servicios del sistema FASTAAPS son unificados en un flujo de eventos que son almacenados peri\u00f3dicamente en archivos persistentes.","title":"Factor 11: Archivos de Registro como un Flujo de Eventos"},{"location":"FASTAAPS/quality/#factor_12_tareas_administrativas_como_procesos_de_vida_corta_incluidos_en_la_distribucion_de_codigo","text":"La aplicaci\u00f3n permite realizar tareas administrativas creando procesos de vida corta en un entorno similar/id\u00e9ntico al entorno de la aplicaci\u00f3n. Estas tareas administrativas deben ser inclu\u00eddas en la distribuci\u00f3n de c\u00f3digo de la aplicaci\u00f3n. Ejemplos de tareas administrativas son: Migraciones de bases de datos, limpieza/actualizaci\u00f3n de datos, administraci\u00f3n de usuarios y credenciales. Ventajas: Consistencia : Al utilizar un ambiente similar/id\u00e9ntico al de la aplicaci\u00f3n para ejecutar tareas administrativas, se minimiza el riesgo de errores con causa ajena a la implementaci\u00f3n de estas tareas. Seguridad : Las tareas administrativas pueden ser riesgosas para la aplicaci\u00f3n por lo que es mejor usar herramientas que los desarrolladores hayan puesto a prueba. Facilidad de Uso : Al inclu\u00edr las tareas en la distribuci\u00f3n de c\u00f3digo, no es necesario importarlas desde un entorno distinto y el equipo de desarrollo garantiza que estas tareas se encuentren actualizadas y que funcionen apropiadamente. Las tareas admnistrativas del sistema FASTAAPS son inclu\u00eddas en el repositorio de c\u00f3digo fuente y son ejecutadas dentro del contenedor correspondiente a la tarea en cuesti\u00f3n.","title":"Factor 12: Tareas Administrativas como Procesos de Vida Corta Inclu\u00eddos en la Distribuci\u00f3n de C\u00f3digo"},{"location":"FASTAAPS/upgrades/","text":"Mejoras de los Sistemas Previos \u00b6 En esta secci\u00f3n describimos los cambios m\u00e1s importantes realizados a los sistemas implementados en consultor\u00edas previas. 1. Estructura General: Arquitectura Basada en Servicios \u00b6 2. Contenerizaci\u00f3n \u00b6 El sistema AAPS-API previo estaba instalado en los servidores de la instituci\u00f3n de manera directa. Las tecnolog\u00edas necesarias para su funcionamiento eran instaladas de manera manual o a trav\u00e9s de un script autom\u00e1tico que se conectaba con el servidor y corr\u00eda los comandos necesarios para la instalaci\u00f3n. Este m\u00e9todo es suficiente para una aplicaci\u00f3n simple, pero a medida que el sistema crece y se a\u00f1aden m\u00e1s componentes, los problemas de dependencias y orquestaci\u00f3n de servicios requieren de soluciones m\u00e1s sustentables. Para la nueva arquitectura basada en servicios se utiliza se utiliza contenedores Docker . Docker es una plataforma que permite a los desarrolladores empaquetar y correr aplicaciones v\u00eda interfaces estandarizadas. Al utilizar Docker, cada servicio es ejecutado en un proceso aislado, eliminando as\u00ed problemas de dependencias. Adem\u00e1s, el uso de contenedores Docker para la puesta en producci\u00f3n reduce el trabajo de instalaci\u00f3n y el uso de scripts de instalaci\u00f3n. Para m\u00e1s informaci\u00f3n con respecto a la contenerizaci\u00f3n de servicios en el sistema FASTAAPS, v\u00e9ase la secci\u00f3n Tecnolog\u00edas de Contenerizaci\u00f3n .","title":"Mejoras del Sistema"},{"location":"FASTAAPS/upgrades/#mejoras_de_los_sistemas_previos","text":"En esta secci\u00f3n describimos los cambios m\u00e1s importantes realizados a los sistemas implementados en consultor\u00edas previas.","title":"Mejoras de los Sistemas Previos"},{"location":"FASTAAPS/upgrades/#1_estructura_general_arquitectura_basada_en_servicios","text":"","title":"1. Estructura General: Arquitectura Basada en Servicios"},{"location":"FASTAAPS/upgrades/#2_contenerizacion","text":"El sistema AAPS-API previo estaba instalado en los servidores de la instituci\u00f3n de manera directa. Las tecnolog\u00edas necesarias para su funcionamiento eran instaladas de manera manual o a trav\u00e9s de un script autom\u00e1tico que se conectaba con el servidor y corr\u00eda los comandos necesarios para la instalaci\u00f3n. Este m\u00e9todo es suficiente para una aplicaci\u00f3n simple, pero a medida que el sistema crece y se a\u00f1aden m\u00e1s componentes, los problemas de dependencias y orquestaci\u00f3n de servicios requieren de soluciones m\u00e1s sustentables. Para la nueva arquitectura basada en servicios se utiliza se utiliza contenedores Docker . Docker es una plataforma que permite a los desarrolladores empaquetar y correr aplicaciones v\u00eda interfaces estandarizadas. Al utilizar Docker, cada servicio es ejecutado en un proceso aislado, eliminando as\u00ed problemas de dependencias. Adem\u00e1s, el uso de contenedores Docker para la puesta en producci\u00f3n reduce el trabajo de instalaci\u00f3n y el uso de scripts de instalaci\u00f3n. Para m\u00e1s informaci\u00f3n con respecto a la contenerizaci\u00f3n de servicios en el sistema FASTAAPS, v\u00e9ase la secci\u00f3n Tecnolog\u00edas de Contenerizaci\u00f3n .","title":"2. Contenerizaci\u00f3n"}]}